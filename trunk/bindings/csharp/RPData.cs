/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class RPData : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal RPData(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(RPData obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~RPData() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if(swigCPtr.Handle != IntPtr.Zero && swigCMemOwn) {
        swigCMemOwn = false;
        tinyWRAPPINVOKE.delete_RPData(swigCPtr);
      }
      swigCPtr = new HandleRef(null, IntPtr.Zero);
      GC.SuppressFinalize(this);
    }
  }

  public RPData() : this(tinyWRAPPINVOKE.new_RPData(), true) {
  }

  public twrap_rpdata_type_t getType() {
    twrap_rpdata_type_t ret = (twrap_rpdata_type_t)tinyWRAPPINVOKE.RPData_getType(swigCPtr);
    return ret;
  }

  public uint getPayloadLength() {
    uint ret = tinyWRAPPINVOKE.RPData_getPayloadLength(swigCPtr);
    return ret;
  }

  public uint getPayload(byte[] output, uint maxsize) {
    uint ret = tinyWRAPPINVOKE.RPData_getPayload(swigCPtr, output, maxsize);
    return ret;
  }

}
