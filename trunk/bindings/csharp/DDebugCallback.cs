/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.40
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */


using System;
using System.Runtime.InteropServices;

public class DDebugCallback : IDisposable {
  private HandleRef swigCPtr;
  protected bool swigCMemOwn;

  internal DDebugCallback(IntPtr cPtr, bool cMemoryOwn) {
    swigCMemOwn = cMemoryOwn;
    swigCPtr = new HandleRef(this, cPtr);
  }

  internal static HandleRef getCPtr(DDebugCallback obj) {
    return (obj == null) ? new HandleRef(null, IntPtr.Zero) : obj.swigCPtr;
  }

  ~DDebugCallback() {
    Dispose();
  }

  public virtual void Dispose() {
    lock(this) {
      if (swigCPtr.Handle != IntPtr.Zero) {
        if (swigCMemOwn) {
          swigCMemOwn = false;
          tinyWRAPPINVOKE.delete_DDebugCallback(swigCPtr);
        }
        swigCPtr = new HandleRef(null, IntPtr.Zero);
      }
      GC.SuppressFinalize(this);
    }
  }

  public DDebugCallback() : this(tinyWRAPPINVOKE.new_DDebugCallback(), true) {
  }

  public virtual int OnDebugInfo(string message) {
    int ret = tinyWRAPPINVOKE.DDebugCallback_OnDebugInfo(swigCPtr, message);
    return ret;
  }

  public virtual int OnDebugWarn(string message) {
    int ret = tinyWRAPPINVOKE.DDebugCallback_OnDebugWarn(swigCPtr, message);
    return ret;
  }

  public virtual int OnDebugError(string message) {
    int ret = tinyWRAPPINVOKE.DDebugCallback_OnDebugError(swigCPtr, message);
    return ret;
  }

  public virtual int OnDebugFatal(string message) {
    int ret = tinyWRAPPINVOKE.DDebugCallback_OnDebugFatal(swigCPtr, message);
    return ret;
  }

}
