/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#define SWIGCSHARP
#define SWIG_DIRECTORS


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif



#include <stdlib.h>
#include <string.h>
#include <stdio.h>


/* Support for throwing C# exceptions from C/C++. There are two types: 
 * Exceptions that take a message and ArgumentExceptions that take a message and a parameter name. */
typedef enum {
  SWIG_CSharpApplicationException,
  SWIG_CSharpArithmeticException,
  SWIG_CSharpDivideByZeroException,
  SWIG_CSharpIndexOutOfRangeException,
  SWIG_CSharpInvalidCastException,
  SWIG_CSharpInvalidOperationException,
  SWIG_CSharpIOException,
  SWIG_CSharpNullReferenceException,
  SWIG_CSharpOutOfMemoryException,
  SWIG_CSharpOverflowException,
  SWIG_CSharpSystemException
} SWIG_CSharpExceptionCodes;

typedef enum {
  SWIG_CSharpArgumentException,
  SWIG_CSharpArgumentNullException,
  SWIG_CSharpArgumentOutOfRangeException
} SWIG_CSharpExceptionArgumentCodes;

typedef void (SWIGSTDCALL* SWIG_CSharpExceptionCallback_t)(const char *);
typedef void (SWIGSTDCALL* SWIG_CSharpExceptionArgumentCallback_t)(const char *, const char *);

typedef struct {
  SWIG_CSharpExceptionCodes code;
  SWIG_CSharpExceptionCallback_t callback;
} SWIG_CSharpException_t;

typedef struct {
  SWIG_CSharpExceptionArgumentCodes code;
  SWIG_CSharpExceptionArgumentCallback_t callback;
} SWIG_CSharpExceptionArgument_t;

static SWIG_CSharpException_t SWIG_csharp_exceptions[] = {
  { SWIG_CSharpApplicationException, NULL },
  { SWIG_CSharpArithmeticException, NULL },
  { SWIG_CSharpDivideByZeroException, NULL },
  { SWIG_CSharpIndexOutOfRangeException, NULL },
  { SWIG_CSharpInvalidCastException, NULL },
  { SWIG_CSharpInvalidOperationException, NULL },
  { SWIG_CSharpIOException, NULL },
  { SWIG_CSharpNullReferenceException, NULL },
  { SWIG_CSharpOutOfMemoryException, NULL },
  { SWIG_CSharpOverflowException, NULL },
  { SWIG_CSharpSystemException, NULL }
};

static SWIG_CSharpExceptionArgument_t SWIG_csharp_exceptions_argument[] = {
  { SWIG_CSharpArgumentException, NULL },
  { SWIG_CSharpArgumentNullException, NULL },
  { SWIG_CSharpArgumentOutOfRangeException, NULL },
};

static void SWIGUNUSED SWIG_CSharpSetPendingException(SWIG_CSharpExceptionCodes code, const char *msg) {
  SWIG_CSharpExceptionCallback_t callback = SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions)/sizeof(SWIG_CSharpException_t)) {
    callback = SWIG_csharp_exceptions[code].callback;
  }
  callback(msg);
}

static void SWIGUNUSED SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpExceptionArgumentCodes code, const char *msg, const char *param_name) {
  SWIG_CSharpExceptionArgumentCallback_t callback = SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback;
  if ((size_t)code < sizeof(SWIG_csharp_exceptions_argument)/sizeof(SWIG_CSharpExceptionArgument_t)) {
    callback = SWIG_csharp_exceptions_argument[code].callback;
  }
  callback(msg, param_name);
}


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionCallbacks_tinyWRAP(
                                                SWIG_CSharpExceptionCallback_t applicationCallback,
                                                SWIG_CSharpExceptionCallback_t arithmeticCallback,
                                                SWIG_CSharpExceptionCallback_t divideByZeroCallback, 
                                                SWIG_CSharpExceptionCallback_t indexOutOfRangeCallback, 
                                                SWIG_CSharpExceptionCallback_t invalidCastCallback,
                                                SWIG_CSharpExceptionCallback_t invalidOperationCallback,
                                                SWIG_CSharpExceptionCallback_t ioCallback,
                                                SWIG_CSharpExceptionCallback_t nullReferenceCallback,
                                                SWIG_CSharpExceptionCallback_t outOfMemoryCallback, 
                                                SWIG_CSharpExceptionCallback_t overflowCallback, 
                                                SWIG_CSharpExceptionCallback_t systemCallback) {
  SWIG_csharp_exceptions[SWIG_CSharpApplicationException].callback = applicationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpArithmeticException].callback = arithmeticCallback;
  SWIG_csharp_exceptions[SWIG_CSharpDivideByZeroException].callback = divideByZeroCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIndexOutOfRangeException].callback = indexOutOfRangeCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidCastException].callback = invalidCastCallback;
  SWIG_csharp_exceptions[SWIG_CSharpInvalidOperationException].callback = invalidOperationCallback;
  SWIG_csharp_exceptions[SWIG_CSharpIOException].callback = ioCallback;
  SWIG_csharp_exceptions[SWIG_CSharpNullReferenceException].callback = nullReferenceCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOutOfMemoryException].callback = outOfMemoryCallback;
  SWIG_csharp_exceptions[SWIG_CSharpOverflowException].callback = overflowCallback;
  SWIG_csharp_exceptions[SWIG_CSharpSystemException].callback = systemCallback;
}

#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterExceptionArgumentCallbacks_tinyWRAP(
                                                SWIG_CSharpExceptionArgumentCallback_t argumentCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentNullCallback,
                                                SWIG_CSharpExceptionArgumentCallback_t argumentOutOfRangeCallback) {
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentException].callback = argumentCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentNullException].callback = argumentNullCallback;
  SWIG_csharp_exceptions_argument[SWIG_CSharpArgumentOutOfRangeException].callback = argumentOutOfRangeCallback;
}


/* Callback for returning strings to C# without leaking memory */
typedef char * (SWIGSTDCALL* SWIG_CSharpStringHelperCallback)(const char *);
static SWIG_CSharpStringHelperCallback SWIG_csharp_string_callback = NULL;


#ifdef __cplusplus
extern "C" 
#endif
SWIGEXPORT void SWIGSTDCALL SWIGRegisterStringCallback_tinyWRAP(SWIG_CSharpStringHelperCallback callback) {
  SWIG_csharp_string_callback = callback;
}


/* Contract support */

#define SWIG_contract_assert(nullreturn, expr, msg) if (!(expr)) {SWIG_CSharpSetPendingExceptionArgument(SWIG_CSharpArgumentOutOfRangeException, msg, ""); return nullreturn; } else

/* -----------------------------------------------------------------------------
 * See the LICENSE file for information on copyright, usage and redistribution
 * of SWIG, and the README file for authors - http://www.swig.org/release.html.
 *
 * director.swg
 *
 * This file contains support for director classes so that C# proxy 
 * methods can be called from C++.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus

#if defined(DEBUG_DIRECTOR_OWNED)
#include <iostream>
#endif
#include <string>

namespace Swig {
  /* Director base class - not currently used in C# directors */
  class Director {
  };

  /* Base class for director exceptions */
  class DirectorException {
  protected:
    std::string swig_msg;

  public:
    DirectorException(const char* msg) : swig_msg(msg) {
    }
    DirectorException(const std::string &msg) : swig_msg(msg) {
    }
    const std::string& what() const {
      return swig_msg;
    }
    virtual ~DirectorException() {
    }
  };

  /* Pure virtual method exception */
  class DirectorPureVirtualException : public Swig::DirectorException {
  public:
    DirectorPureVirtualException(const char* msg) : DirectorException(std::string("Attempt to invoke pure virtual method ") + msg) {
    }
  };
}

#endif /* __cplusplus */



#include "DDebug.h"


#include "SipUri.h"
#include "SipMessage.h"
#include "SipEvent.h"
#include "SipSession.h"

#include "ProxyConsumer.h"
#include "ProxyProducer.h"

#include "SipCallback.h"
#include "SafeObject.h"
#include "SipStack.h"


#include "Xcap.h"


#include "SMSEncoder.h"



/* ---------------------------------------------------
 * C++ director class methods
 * --------------------------------------------------- */

#include "tinyWRAP_wrap.h"

SwigDirector_ProxyAudioConsumer::SwigDirector_ProxyAudioConsumer() : ProxyAudioConsumer(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ProxyAudioConsumer::~SwigDirector_ProxyAudioConsumer() {
  
}


int SwigDirector_ProxyAudioConsumer::prepare(int ptime, int rate, int channels) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jptime  ;
  int jrate  ;
  int jchannels  ;
  
  if (!swig_callbackprepare) {
    return ProxyAudioConsumer::prepare(ptime,rate,channels);
  } else {
    jptime = ptime;
    jrate = rate;
    jchannels = channels;
    jresult = (int) swig_callbackprepare(jptime, jrate, jchannels);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyAudioConsumer::start() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackstart) {
    return ProxyAudioConsumer::start();
  } else {
    jresult = (int) swig_callbackstart();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyAudioConsumer::pause() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackpause) {
    return ProxyAudioConsumer::pause();
  } else {
    jresult = (int) swig_callbackpause();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyAudioConsumer::stop() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackstop) {
    return ProxyAudioConsumer::stop();
  } else {
    jresult = (int) swig_callbackstop();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_ProxyAudioConsumer::swig_connect_director(SWIG_Callback0_t callbackprepare, SWIG_Callback1_t callbackstart, SWIG_Callback2_t callbackpause, SWIG_Callback3_t callbackstop) {
  swig_callbackprepare = callbackprepare;
  swig_callbackstart = callbackstart;
  swig_callbackpause = callbackpause;
  swig_callbackstop = callbackstop;
}

void SwigDirector_ProxyAudioConsumer::swig_init_callbacks() {
  swig_callbackprepare = 0;
  swig_callbackstart = 0;
  swig_callbackpause = 0;
  swig_callbackstop = 0;
}

SwigDirector_ProxyVideoConsumer::SwigDirector_ProxyVideoConsumer(tmedia_chroma_t chroma) : ProxyVideoConsumer(chroma), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ProxyVideoConsumer::~SwigDirector_ProxyVideoConsumer() {
  
}


int SwigDirector_ProxyVideoConsumer::prepare(int width, int height, int fps) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jwidth  ;
  int jheight  ;
  int jfps  ;
  
  if (!swig_callbackprepare) {
    return ProxyVideoConsumer::prepare(width,height,fps);
  } else {
    jwidth = width;
    jheight = height;
    jfps = fps;
    jresult = (int) swig_callbackprepare(jwidth, jheight, jfps);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyVideoConsumer::consume(ProxyVideoFrame const *frame) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * jframe = 0 ;
  
  if (!swig_callbackconsume) {
    return ProxyVideoConsumer::consume(frame);
  } else {
    jframe = (void *) frame; 
    jresult = (int) swig_callbackconsume(jframe);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyVideoConsumer::start() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackstart) {
    return ProxyVideoConsumer::start();
  } else {
    jresult = (int) swig_callbackstart();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyVideoConsumer::pause() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackpause) {
    return ProxyVideoConsumer::pause();
  } else {
    jresult = (int) swig_callbackpause();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyVideoConsumer::stop() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackstop) {
    return ProxyVideoConsumer::stop();
  } else {
    jresult = (int) swig_callbackstop();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_ProxyVideoConsumer::swig_connect_director(SWIG_Callback0_t callbackprepare, SWIG_Callback1_t callbackconsume, SWIG_Callback2_t callbackstart, SWIG_Callback3_t callbackpause, SWIG_Callback4_t callbackstop) {
  swig_callbackprepare = callbackprepare;
  swig_callbackconsume = callbackconsume;
  swig_callbackstart = callbackstart;
  swig_callbackpause = callbackpause;
  swig_callbackstop = callbackstop;
}

void SwigDirector_ProxyVideoConsumer::swig_init_callbacks() {
  swig_callbackprepare = 0;
  swig_callbackconsume = 0;
  swig_callbackstart = 0;
  swig_callbackpause = 0;
  swig_callbackstop = 0;
}

SwigDirector_ProxyAudioProducer::SwigDirector_ProxyAudioProducer() : ProxyAudioProducer(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ProxyAudioProducer::~SwigDirector_ProxyAudioProducer() {
  
}


int SwigDirector_ProxyAudioProducer::prepare(int ptime, int rate, int channels) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jptime  ;
  int jrate  ;
  int jchannels  ;
  
  if (!swig_callbackprepare) {
    return ProxyAudioProducer::prepare(ptime,rate,channels);
  } else {
    jptime = ptime;
    jrate = rate;
    jchannels = channels;
    jresult = (int) swig_callbackprepare(jptime, jrate, jchannels);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyAudioProducer::start() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackstart) {
    return ProxyAudioProducer::start();
  } else {
    jresult = (int) swig_callbackstart();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyAudioProducer::pause() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackpause) {
    return ProxyAudioProducer::pause();
  } else {
    jresult = (int) swig_callbackpause();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyAudioProducer::stop() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackstop) {
    return ProxyAudioProducer::stop();
  } else {
    jresult = (int) swig_callbackstop();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_ProxyAudioProducer::swig_connect_director(SWIG_Callback0_t callbackprepare, SWIG_Callback1_t callbackstart, SWIG_Callback2_t callbackpause, SWIG_Callback3_t callbackstop) {
  swig_callbackprepare = callbackprepare;
  swig_callbackstart = callbackstart;
  swig_callbackpause = callbackpause;
  swig_callbackstop = callbackstop;
}

void SwigDirector_ProxyAudioProducer::swig_init_callbacks() {
  swig_callbackprepare = 0;
  swig_callbackstart = 0;
  swig_callbackpause = 0;
  swig_callbackstop = 0;
}

SwigDirector_ProxyVideoProducer::SwigDirector_ProxyVideoProducer(tmedia_chroma_t chroma) : ProxyVideoProducer(chroma), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_ProxyVideoProducer::~SwigDirector_ProxyVideoProducer() {
  
}


int SwigDirector_ProxyVideoProducer::prepare(int width, int height, int fps) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  int jwidth  ;
  int jheight  ;
  int jfps  ;
  
  if (!swig_callbackprepare) {
    return ProxyVideoProducer::prepare(width,height,fps);
  } else {
    jwidth = width;
    jheight = height;
    jfps = fps;
    jresult = (int) swig_callbackprepare(jwidth, jheight, jfps);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyVideoProducer::start() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackstart) {
    return ProxyVideoProducer::start();
  } else {
    jresult = (int) swig_callbackstart();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyVideoProducer::pause() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackpause) {
    return ProxyVideoProducer::pause();
  } else {
    jresult = (int) swig_callbackpause();
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_ProxyVideoProducer::stop() {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  
  if (!swig_callbackstop) {
    return ProxyVideoProducer::stop();
  } else {
    jresult = (int) swig_callbackstop();
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_ProxyVideoProducer::swig_connect_director(SWIG_Callback0_t callbackprepare, SWIG_Callback1_t callbackstart, SWIG_Callback2_t callbackpause, SWIG_Callback3_t callbackstop) {
  swig_callbackprepare = callbackprepare;
  swig_callbackstart = callbackstart;
  swig_callbackpause = callbackpause;
  swig_callbackstop = callbackstop;
}

void SwigDirector_ProxyVideoProducer::swig_init_callbacks() {
  swig_callbackprepare = 0;
  swig_callbackstart = 0;
  swig_callbackpause = 0;
  swig_callbackstop = 0;
}

SwigDirector_SipCallback::SwigDirector_SipCallback() : SipCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_SipCallback::~SwigDirector_SipCallback() {
  
}


int SwigDirector_SipCallback::OnDialogEvent(DialogEvent const *e) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackOnDialogEvent) {
    return SipCallback::OnDialogEvent(e);
  } else {
    je = (void *) e; 
    jresult = (int) swig_callbackOnDialogEvent(je);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_SipCallback::OnStackEvent(StackEvent const *e) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackOnStackEvent) {
    return SipCallback::OnStackEvent(e);
  } else {
    je = (void *) e; 
    jresult = (int) swig_callbackOnStackEvent(je);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_SipCallback::OnCallEvent(CallEvent const *e) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackOnCallEvent) {
    return SipCallback::OnCallEvent(e);
  } else {
    je = (void *) e; 
    jresult = (int) swig_callbackOnCallEvent(je);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_SipCallback::OnMessagingEvent(MessagingEvent const *e) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackOnMessagingEvent) {
    return SipCallback::OnMessagingEvent(e);
  } else {
    je = (void *) e; 
    jresult = (int) swig_callbackOnMessagingEvent(je);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_SipCallback::OnOptionsEvent(OptionsEvent const *e) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackOnOptionsEvent) {
    return SipCallback::OnOptionsEvent(e);
  } else {
    je = (void *) e; 
    jresult = (int) swig_callbackOnOptionsEvent(je);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_SipCallback::OnPublicationEvent(PublicationEvent const *e) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackOnPublicationEvent) {
    return SipCallback::OnPublicationEvent(e);
  } else {
    je = (void *) e; 
    jresult = (int) swig_callbackOnPublicationEvent(je);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_SipCallback::OnRegistrationEvent(RegistrationEvent const *e) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackOnRegistrationEvent) {
    return SipCallback::OnRegistrationEvent(e);
  } else {
    je = (void *) e; 
    jresult = (int) swig_callbackOnRegistrationEvent(je);
    c_result = (int)jresult; 
  }
  return c_result;
}

int SwigDirector_SipCallback::OnSubscriptionEvent(SubscriptionEvent const *e) {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackOnSubscriptionEvent) {
    return SipCallback::OnSubscriptionEvent(e);
  } else {
    je = (void *) e; 
    jresult = (int) swig_callbackOnSubscriptionEvent(je);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_SipCallback::swig_connect_director(SWIG_Callback0_t callbackOnDialogEvent, SWIG_Callback1_t callbackOnStackEvent, SWIG_Callback2_t callbackOnCallEvent, SWIG_Callback3_t callbackOnMessagingEvent, SWIG_Callback4_t callbackOnOptionsEvent, SWIG_Callback5_t callbackOnPublicationEvent, SWIG_Callback6_t callbackOnRegistrationEvent, SWIG_Callback7_t callbackOnSubscriptionEvent) {
  swig_callbackOnDialogEvent = callbackOnDialogEvent;
  swig_callbackOnStackEvent = callbackOnStackEvent;
  swig_callbackOnCallEvent = callbackOnCallEvent;
  swig_callbackOnMessagingEvent = callbackOnMessagingEvent;
  swig_callbackOnOptionsEvent = callbackOnOptionsEvent;
  swig_callbackOnPublicationEvent = callbackOnPublicationEvent;
  swig_callbackOnRegistrationEvent = callbackOnRegistrationEvent;
  swig_callbackOnSubscriptionEvent = callbackOnSubscriptionEvent;
}

void SwigDirector_SipCallback::swig_init_callbacks() {
  swig_callbackOnDialogEvent = 0;
  swig_callbackOnStackEvent = 0;
  swig_callbackOnCallEvent = 0;
  swig_callbackOnMessagingEvent = 0;
  swig_callbackOnOptionsEvent = 0;
  swig_callbackOnPublicationEvent = 0;
  swig_callbackOnRegistrationEvent = 0;
  swig_callbackOnSubscriptionEvent = 0;
}

SwigDirector_XcapCallback::SwigDirector_XcapCallback() : XcapCallback(), Swig::Director() {
  swig_init_callbacks();
}

SwigDirector_XcapCallback::~SwigDirector_XcapCallback() {
  
}


int SwigDirector_XcapCallback::onEvent(XcapEvent const *e) const {
  int c_result = SwigValueInit< int >() ;
  int jresult = 0 ;
  void * je = 0 ;
  
  if (!swig_callbackonEvent) {
    return XcapCallback::onEvent(e);
  } else {
    je = (void *) e; 
    jresult = (int) swig_callbackonEvent(je);
    c_result = (int)jresult; 
  }
  return c_result;
}

void SwigDirector_XcapCallback::swig_connect_director(SWIG_Callback0_t callbackonEvent) {
  swig_callbackonEvent = callbackonEvent;
}

void SwigDirector_XcapCallback::swig_init_callbacks() {
  swig_callbackonEvent = 0;
}


#ifdef __cplusplus
extern "C" {
#endif

SWIGEXPORT void * SWIGSTDCALL CSharp_new_DDebugCallback() {
  void * jresult ;
  DDebugCallback *result = 0 ;
  
  result = (DDebugCallback *)new DDebugCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DDebugCallback(void * jarg1) {
  DDebugCallback *arg1 = (DDebugCallback *) 0 ;
  
  arg1 = (DDebugCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DDebugCallback_OnDebugInfo(void * jarg1, char * jarg2) {
  int jresult ;
  DDebugCallback *arg1 = (DDebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DDebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->OnDebugInfo((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DDebugCallback_OnDebugWarn(void * jarg1, char * jarg2) {
  int jresult ;
  DDebugCallback *arg1 = (DDebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DDebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->OnDebugWarn((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DDebugCallback_OnDebugError(void * jarg1, char * jarg2) {
  int jresult ;
  DDebugCallback *arg1 = (DDebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DDebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->OnDebugError((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_DDebugCallback_OnDebugFatal(void * jarg1, char * jarg2) {
  int jresult ;
  DDebugCallback *arg1 = (DDebugCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  int result;
  
  arg1 = (DDebugCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (int)(arg1)->OnDebugFatal((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipUri(char * jarg1) {
  void * jresult ;
  char *arg1 = (char *) 0 ;
  SipUri *result = 0 ;
  
  arg1 = (char *)jarg1; 
  result = (SipUri *)new SipUri((char const *)arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipUri(void * jarg1) {
  SipUri *arg1 = (SipUri *) 0 ;
  
  arg1 = (SipUri *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipUri_isValid__SWIG_0(char * jarg1) {
  unsigned int jresult ;
  char *arg1 = (char *) 0 ;
  bool result;
  
  arg1 = (char *)jarg1; 
  result = (bool)SipUri::isValid((char const *)arg1);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipUri_isValid__SWIG_1(void * jarg1) {
  unsigned int jresult ;
  SipUri *arg1 = (SipUri *) 0 ;
  bool result;
  
  arg1 = (SipUri *)jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipUri_getScheme(void * jarg1) {
  char * jresult ;
  SipUri *arg1 = (SipUri *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipUri *)jarg1; 
  result = (char *)(arg1)->getScheme();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipUri_getHost(void * jarg1) {
  char * jresult ;
  SipUri *arg1 = (SipUri *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipUri *)jarg1; 
  result = (char *)(arg1)->getHost();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT unsigned short SWIGSTDCALL CSharp_SipUri_getPort(void * jarg1) {
  unsigned short jresult ;
  SipUri *arg1 = (SipUri *) 0 ;
  unsigned short result;
  
  arg1 = (SipUri *)jarg1; 
  result = (unsigned short)(arg1)->getPort();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipUri_getUserName(void * jarg1) {
  char * jresult ;
  SipUri *arg1 = (SipUri *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipUri *)jarg1; 
  result = (char *)(arg1)->getUserName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipUri_getPassword(void * jarg1) {
  char * jresult ;
  SipUri *arg1 = (SipUri *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipUri *)jarg1; 
  result = (char *)(arg1)->getPassword();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipUri_getDisplayName(void * jarg1) {
  char * jresult ;
  SipUri *arg1 = (SipUri *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipUri *)jarg1; 
  result = (char *)(arg1)->getDisplayName();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipUri_getParamValue(void * jarg1, char * jarg2) {
  char * jresult ;
  SipUri *arg1 = (SipUri *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipUri *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->getParamValue((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipMessage() {
  void * jresult ;
  SipMessage *result = 0 ;
  
  result = (SipMessage *)new SipMessage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipMessage(void * jarg1) {
  SipMessage *arg1 = (SipMessage *) 0 ;
  
  arg1 = (SipMessage *)jarg1; 
  delete arg1;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipMessage_getSipHeaderValue__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  SipMessage *arg1 = (SipMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char *result = 0 ;
  
  arg1 = (SipMessage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (char *)(arg1)->getSipHeaderValue((char const *)arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipMessage_getSipHeaderValue__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  SipMessage *arg1 = (SipMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipMessage *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->getSipHeaderValue((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipMessage_getSipHeaderParamValue__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  char * jresult ;
  SipMessage *arg1 = (SipMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  char *result = 0 ;
  
  arg1 = (SipMessage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (char *)(arg1)->getSipHeaderParamValue((char const *)arg2,(char const *)arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipMessage_getSipHeaderParamValue__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  SipMessage *arg1 = (SipMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipMessage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (char *)(arg1)->getSipHeaderParamValue((char const *)arg2,(char const *)arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipMessage_getSipContentLength(void * jarg1) {
  unsigned int jresult ;
  SipMessage *arg1 = (SipMessage *) 0 ;
  unsigned int result;
  
  arg1 = (SipMessage *)jarg1; 
  result = (unsigned int)(arg1)->getSipContentLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipMessage_getSipContent(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  SipMessage *arg1 = (SipMessage *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (SipMessage *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)(arg1)->getSipContent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipEvent(void * jarg1) {
  SipEvent *arg1 = (SipEvent *) 0 ;
  
  arg1 = (SipEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT short SWIGSTDCALL CSharp_SipEvent_getCode(void * jarg1) {
  short jresult ;
  SipEvent *arg1 = (SipEvent *) 0 ;
  short result;
  
  arg1 = (SipEvent *)jarg1; 
  result = (short)((SipEvent const *)arg1)->getCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipEvent_getPhrase(void * jarg1) {
  char * jresult ;
  SipEvent *arg1 = (SipEvent *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipEvent *)jarg1; 
  result = (char *)((SipEvent const *)arg1)->getPhrase();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEvent_getBaseSession(void * jarg1) {
  void * jresult ;
  SipEvent *arg1 = (SipEvent *) 0 ;
  SipSession *result = 0 ;
  
  arg1 = (SipEvent *)jarg1; 
  result = (SipSession *)((SipEvent const *)arg1)->getBaseSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SipEvent_getSipMessage(void * jarg1) {
  void * jresult ;
  SipEvent *arg1 = (SipEvent *) 0 ;
  SipMessage *result = 0 ;
  
  arg1 = (SipEvent *)jarg1; 
  result = (SipMessage *)((SipEvent const *)arg1)->getSipMessage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_DialogEvent(void * jarg1) {
  DialogEvent *arg1 = (DialogEvent *) 0 ;
  
  arg1 = (DialogEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_StackEvent(void * jarg1) {
  StackEvent *arg1 = (StackEvent *) 0 ;
  
  arg1 = (StackEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallEvent(void * jarg1) {
  CallEvent *arg1 = (CallEvent *) 0 ;
  
  arg1 = (CallEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallEvent_getType(void * jarg1) {
  int jresult ;
  CallEvent *arg1 = (CallEvent *) 0 ;
  tsip_invite_event_type_t result;
  
  arg1 = (CallEvent *)jarg1; 
  result = (tsip_invite_event_type_t)((CallEvent const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_CallEvent_getMediaType(void * jarg1) {
  int jresult ;
  CallEvent *arg1 = (CallEvent *) 0 ;
  twrap_media_type_t result;
  
  arg1 = (CallEvent *)jarg1; 
  result = (twrap_media_type_t)(arg1)->getMediaType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallEvent_getSession(void * jarg1) {
  void * jresult ;
  CallEvent *arg1 = (CallEvent *) 0 ;
  CallSession *result = 0 ;
  
  arg1 = (CallEvent *)jarg1; 
  result = (CallSession *)((CallEvent const *)arg1)->getSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_CallEvent_takeSessionOwnership(void * jarg1) {
  void * jresult ;
  CallEvent *arg1 = (CallEvent *) 0 ;
  CallSession *result = 0 ;
  
  arg1 = (CallEvent *)jarg1; 
  result = (CallSession *)((CallEvent const *)arg1)->takeSessionOwnership();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MessagingEvent(void * jarg1) {
  MessagingEvent *arg1 = (MessagingEvent *) 0 ;
  
  arg1 = (MessagingEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_MessagingEvent_getType(void * jarg1) {
  int jresult ;
  MessagingEvent *arg1 = (MessagingEvent *) 0 ;
  tsip_message_event_type_t result;
  
  arg1 = (MessagingEvent *)jarg1; 
  result = (tsip_message_event_type_t)((MessagingEvent const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessagingEvent_getSession(void * jarg1) {
  void * jresult ;
  MessagingEvent *arg1 = (MessagingEvent *) 0 ;
  MessagingSession *result = 0 ;
  
  arg1 = (MessagingEvent *)jarg1; 
  result = (MessagingSession *)((MessagingEvent const *)arg1)->getSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_MessagingEvent_takeSessionOwnership(void * jarg1) {
  void * jresult ;
  MessagingEvent *arg1 = (MessagingEvent *) 0 ;
  MessagingSession *result = 0 ;
  
  arg1 = (MessagingEvent *)jarg1; 
  result = (MessagingSession *)((MessagingEvent const *)arg1)->takeSessionOwnership();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OptionsEvent(void * jarg1) {
  OptionsEvent *arg1 = (OptionsEvent *) 0 ;
  
  arg1 = (OptionsEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_OptionsEvent_getType(void * jarg1) {
  int jresult ;
  OptionsEvent *arg1 = (OptionsEvent *) 0 ;
  tsip_options_event_type_t result;
  
  arg1 = (OptionsEvent *)jarg1; 
  result = (tsip_options_event_type_t)((OptionsEvent const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_OptionsEvent_getSession(void * jarg1) {
  void * jresult ;
  OptionsEvent *arg1 = (OptionsEvent *) 0 ;
  OptionsSession *result = 0 ;
  
  arg1 = (OptionsEvent *)jarg1; 
  result = (OptionsSession *)((OptionsEvent const *)arg1)->getSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PublicationEvent(void * jarg1) {
  PublicationEvent *arg1 = (PublicationEvent *) 0 ;
  
  arg1 = (PublicationEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_PublicationEvent_getType(void * jarg1) {
  int jresult ;
  PublicationEvent *arg1 = (PublicationEvent *) 0 ;
  tsip_publish_event_type_t result;
  
  arg1 = (PublicationEvent *)jarg1; 
  result = (tsip_publish_event_type_t)((PublicationEvent const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_PublicationEvent_getSession(void * jarg1) {
  void * jresult ;
  PublicationEvent *arg1 = (PublicationEvent *) 0 ;
  PublicationSession *result = 0 ;
  
  arg1 = (PublicationEvent *)jarg1; 
  result = (PublicationSession *)((PublicationEvent const *)arg1)->getSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RegistrationEvent(void * jarg1) {
  RegistrationEvent *arg1 = (RegistrationEvent *) 0 ;
  
  arg1 = (RegistrationEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RegistrationEvent_getType(void * jarg1) {
  int jresult ;
  RegistrationEvent *arg1 = (RegistrationEvent *) 0 ;
  tsip_register_event_type_t result;
  
  arg1 = (RegistrationEvent *)jarg1; 
  result = (tsip_register_event_type_t)((RegistrationEvent const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_RegistrationEvent_getSession(void * jarg1) {
  void * jresult ;
  RegistrationEvent *arg1 = (RegistrationEvent *) 0 ;
  RegistrationSession *result = 0 ;
  
  arg1 = (RegistrationEvent *)jarg1; 
  result = (RegistrationSession *)((RegistrationEvent const *)arg1)->getSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SubscriptionEvent(void * jarg1) {
  SubscriptionEvent *arg1 = (SubscriptionEvent *) 0 ;
  
  arg1 = (SubscriptionEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SubscriptionEvent_getType(void * jarg1) {
  int jresult ;
  SubscriptionEvent *arg1 = (SubscriptionEvent *) 0 ;
  tsip_subscribe_event_type_t result;
  
  arg1 = (SubscriptionEvent *)jarg1; 
  result = (tsip_subscribe_event_type_t)((SubscriptionEvent const *)arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SubscriptionEvent_getSession(void * jarg1) {
  void * jresult ;
  SubscriptionEvent *arg1 = (SubscriptionEvent *) 0 ;
  SubscriptionSession *result = 0 ;
  
  arg1 = (SubscriptionEvent *)jarg1; 
  result = (SubscriptionSession *)((SubscriptionEvent const *)arg1)->getSession();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipSession(void * jarg1) {
  void * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  SipSession *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  result = (SipSession *)new SipSession(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipSession(void * jarg1) {
  SipSession *arg1 = (SipSession *) 0 ;
  
  arg1 = (SipSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_haveOwnership(void * jarg1) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  result = (bool)(arg1)->haveOwnership();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_addHeader(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->addHeader((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_removeHeader(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->removeHeader((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_addCaps__SWIG_0(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->addCaps((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_addCaps__SWIG_1(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->addCaps((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_removeCaps(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->removeCaps((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_setExpires(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->setExpires(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_setFromUri(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setFromUri((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_setToUri(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setToUri((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_setSilentHangup(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setSilentHangup(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_addSigCompCompartment(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->addSigCompCompartment((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_removeSigCompCompartment(void * jarg1) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  bool result;
  
  arg1 = (SipSession *)jarg1; 
  result = (bool)(arg1)->removeSigCompCompartment();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipSession_getId(void * jarg1) {
  unsigned int jresult ;
  SipSession *arg1 = (SipSession *) 0 ;
  unsigned int result;
  
  arg1 = (SipSession *)jarg1; 
  result = (unsigned int)(arg1)->getId();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_CallSession(void * jarg1) {
  void * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  CallSession *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  result = (CallSession *)new CallSession(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_CallSession(void * jarg1) {
  CallSession *arg1 = (CallSession *) 0 ;
  
  arg1 = (CallSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_callAudio(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->callAudio((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_callAudioVideo(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->callAudioVideo((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_callVideo(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->callVideo((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_setSessionTimer(void * jarg1, unsigned int jarg2, char * jarg3) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  unsigned int arg2 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setSessionTimer(arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_set100rel(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->set100rel(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_setQoS(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  tmedia_qos_stype_t arg2 ;
  tmedia_qos_strength_t arg3 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  arg2 = (tmedia_qos_stype_t)jarg2; 
  arg3 = (tmedia_qos_strength_t)jarg3; 
  result = (bool)(arg1)->setQoS(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_accept(void * jarg1) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  result = (bool)(arg1)->accept();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_hold(void * jarg1) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  result = (bool)(arg1)->hold();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_resume(void * jarg1) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  result = (bool)(arg1)->resume();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_sendDTMF(void * jarg1, int jarg2) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  int arg2 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  arg2 = (int)jarg2; 
  result = (bool)(arg1)->sendDTMF(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_hangup(void * jarg1) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  result = (bool)(arg1)->hangup();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_CallSession_reject(void * jarg1) {
  unsigned int jresult ;
  CallSession *arg1 = (CallSession *) 0 ;
  bool result;
  
  arg1 = (CallSession *)jarg1; 
  result = (bool)(arg1)->reject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_MessagingSession(void * jarg1) {
  void * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  MessagingSession *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  result = (MessagingSession *)new MessagingSession(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_MessagingSession(void * jarg1) {
  MessagingSession *arg1 = (MessagingSession *) 0 ;
  
  arg1 = (MessagingSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessagingSession_send(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  MessagingSession *arg1 = (MessagingSession *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (MessagingSession *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->send((void const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessagingSession_accept(void * jarg1) {
  unsigned int jresult ;
  MessagingSession *arg1 = (MessagingSession *) 0 ;
  bool result;
  
  arg1 = (MessagingSession *)jarg1; 
  result = (bool)(arg1)->accept();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_MessagingSession_reject(void * jarg1) {
  unsigned int jresult ;
  MessagingSession *arg1 = (MessagingSession *) 0 ;
  bool result;
  
  arg1 = (MessagingSession *)jarg1; 
  result = (bool)(arg1)->reject();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_OptionsSession(void * jarg1) {
  void * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  OptionsSession *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  result = (OptionsSession *)new OptionsSession(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_OptionsSession(void * jarg1) {
  OptionsSession *arg1 = (OptionsSession *) 0 ;
  
  arg1 = (OptionsSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_OptionsSession_send(void * jarg1) {
  unsigned int jresult ;
  OptionsSession *arg1 = (OptionsSession *) 0 ;
  bool result;
  
  arg1 = (OptionsSession *)jarg1; 
  result = (bool)(arg1)->send();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_PublicationSession(void * jarg1) {
  void * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  PublicationSession *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  result = (PublicationSession *)new PublicationSession(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_PublicationSession(void * jarg1) {
  PublicationSession *arg1 = (PublicationSession *) 0 ;
  
  arg1 = (PublicationSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PublicationSession_publish(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  PublicationSession *arg1 = (PublicationSession *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  bool result;
  
  arg1 = (PublicationSession *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (bool)(arg1)->publish((void const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_PublicationSession_unPublish(void * jarg1) {
  unsigned int jresult ;
  PublicationSession *arg1 = (PublicationSession *) 0 ;
  bool result;
  
  arg1 = (PublicationSession *)jarg1; 
  result = (bool)(arg1)->unPublish();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RegistrationSession(void * jarg1) {
  void * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  RegistrationSession *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  result = (RegistrationSession *)new RegistrationSession(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RegistrationSession(void * jarg1) {
  RegistrationSession *arg1 = (RegistrationSession *) 0 ;
  
  arg1 = (RegistrationSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegistrationSession_register_(void * jarg1) {
  unsigned int jresult ;
  RegistrationSession *arg1 = (RegistrationSession *) 0 ;
  bool result;
  
  arg1 = (RegistrationSession *)jarg1; 
  result = (bool)(arg1)->register_();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RegistrationSession_unRegister(void * jarg1) {
  unsigned int jresult ;
  RegistrationSession *arg1 = (RegistrationSession *) 0 ;
  bool result;
  
  arg1 = (RegistrationSession *)jarg1; 
  result = (bool)(arg1)->unRegister();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SubscriptionSession(void * jarg1) {
  void * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  SubscriptionSession *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  result = (SubscriptionSession *)new SubscriptionSession(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SubscriptionSession(void * jarg1) {
  SubscriptionSession *arg1 = (SubscriptionSession *) 0 ;
  
  arg1 = (SubscriptionSession *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubscriptionSession_subscribe(void * jarg1) {
  unsigned int jresult ;
  SubscriptionSession *arg1 = (SubscriptionSession *) 0 ;
  bool result;
  
  arg1 = (SubscriptionSession *)jarg1; 
  result = (bool)(arg1)->subscribe();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SubscriptionSession_unSubscribe(void * jarg1) {
  unsigned int jresult ;
  SubscriptionSession *arg1 = (SubscriptionSession *) 0 ;
  bool result;
  
  arg1 = (SubscriptionSession *)jarg1; 
  result = (bool)(arg1)->unSubscribe();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProxyAudioConsumer() {
  void * jresult ;
  ProxyAudioConsumer *result = 0 ;
  
  result = (ProxyAudioConsumer *)new SwigDirector_ProxyAudioConsumer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProxyAudioConsumer(void * jarg1) {
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioConsumer_prepare(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->prepare(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioConsumer_prepareSwigExplicitProxyAudioConsumer(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->ProxyAudioConsumer::prepare(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioConsumer_start(void * jarg1) {
  int jresult ;
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  result = (int)(arg1)->start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioConsumer_startSwigExplicitProxyAudioConsumer(void * jarg1) {
  int jresult ;
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  result = (int)(arg1)->ProxyAudioConsumer::start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioConsumer_pause(void * jarg1) {
  int jresult ;
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  result = (int)(arg1)->pause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioConsumer_pauseSwigExplicitProxyAudioConsumer(void * jarg1) {
  int jresult ;
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  result = (int)(arg1)->ProxyAudioConsumer::pause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioConsumer_stop(void * jarg1) {
  int jresult ;
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  result = (int)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioConsumer_stopSwigExplicitProxyAudioConsumer(void * jarg1) {
  int jresult ;
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  result = (int)(arg1)->ProxyAudioConsumer::stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProxyAudioConsumer_setActivate(void * jarg1, unsigned int jarg2) {
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  bool arg2 ;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActivate(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProxyAudioConsumer_pull(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ProxyAudioConsumer *arg1 = (ProxyAudioConsumer *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (ProxyAudioConsumer *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)(arg1)->pull(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProxyAudioConsumer_registerPlugin() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ProxyAudioConsumer::registerPlugin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProxyAudioConsumer_director_connect(void *objarg, SwigDirector_ProxyAudioConsumer::SWIG_Callback0_t callback0, SwigDirector_ProxyAudioConsumer::SWIG_Callback1_t callback1, SwigDirector_ProxyAudioConsumer::SWIG_Callback2_t callback2, SwigDirector_ProxyAudioConsumer::SWIG_Callback3_t callback3) {
  ProxyAudioConsumer *obj = (ProxyAudioConsumer *)objarg;
  SwigDirector_ProxyAudioConsumer *director = dynamic_cast<SwigDirector_ProxyAudioConsumer *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProxyVideoConsumer(int jarg1) {
  void * jresult ;
  tmedia_chroma_t arg1 ;
  ProxyVideoConsumer *result = 0 ;
  
  arg1 = (tmedia_chroma_t)jarg1; 
  result = (ProxyVideoConsumer *)new SwigDirector_ProxyVideoConsumer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProxyVideoConsumer(void * jarg1) {
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_prepare(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->prepare(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_prepareSwigExplicitProxyVideoConsumer(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->ProxyVideoConsumer::prepare(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_consume(void * jarg1, void * jarg2) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  ProxyVideoFrame *arg2 = (ProxyVideoFrame *) 0 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  arg2 = (ProxyVideoFrame *)jarg2; 
  result = (int)(arg1)->consume((ProxyVideoFrame const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_consumeSwigExplicitProxyVideoConsumer(void * jarg1, void * jarg2) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  ProxyVideoFrame *arg2 = (ProxyVideoFrame *) 0 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  arg2 = (ProxyVideoFrame *)jarg2; 
  result = (int)(arg1)->ProxyVideoConsumer::consume((ProxyVideoFrame const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_start(void * jarg1) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  result = (int)(arg1)->start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_startSwigExplicitProxyVideoConsumer(void * jarg1) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  result = (int)(arg1)->ProxyVideoConsumer::start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_pause(void * jarg1) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  result = (int)(arg1)->pause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_pauseSwigExplicitProxyVideoConsumer(void * jarg1) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  result = (int)(arg1)->ProxyVideoConsumer::pause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_stop(void * jarg1) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  result = (int)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoConsumer_stopSwigExplicitProxyVideoConsumer(void * jarg1) {
  int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  result = (int)(arg1)->ProxyVideoConsumer::stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProxyVideoConsumer_setActivate(void * jarg1, unsigned int jarg2) {
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  bool arg2 ;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActivate(arg2);
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProxyVideoConsumer_setDisplaySize(void * jarg1, int jarg2, int jarg3) {
  unsigned int jresult ;
  ProxyVideoConsumer *arg1 = (ProxyVideoConsumer *) 0 ;
  int arg2 ;
  int arg3 ;
  bool result;
  
  arg1 = (ProxyVideoConsumer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->setDisplaySize(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProxyVideoConsumer_registerPlugin() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ProxyVideoConsumer::registerPlugin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProxyVideoConsumer_director_connect(void *objarg, SwigDirector_ProxyVideoConsumer::SWIG_Callback0_t callback0, SwigDirector_ProxyVideoConsumer::SWIG_Callback1_t callback1, SwigDirector_ProxyVideoConsumer::SWIG_Callback2_t callback2, SwigDirector_ProxyVideoConsumer::SWIG_Callback3_t callback3, SwigDirector_ProxyVideoConsumer::SWIG_Callback4_t callback4) {
  ProxyVideoConsumer *obj = (ProxyVideoConsumer *)objarg;
  SwigDirector_ProxyVideoConsumer *director = dynamic_cast<SwigDirector_ProxyVideoConsumer *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4);
  }
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProxyVideoFrame(void * jarg1) {
  ProxyVideoFrame *arg1 = (ProxyVideoFrame *) 0 ;
  
  arg1 = (ProxyVideoFrame *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProxyVideoFrame_getSize(void * jarg1) {
  unsigned int jresult ;
  ProxyVideoFrame *arg1 = (ProxyVideoFrame *) 0 ;
  unsigned int result;
  
  arg1 = (ProxyVideoFrame *)jarg1; 
  result = (unsigned int)(arg1)->getSize();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProxyVideoFrame_getContent(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  ProxyVideoFrame *arg1 = (ProxyVideoFrame *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (ProxyVideoFrame *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)(arg1)->getContent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProxyAudioProducer() {
  void * jresult ;
  ProxyAudioProducer *result = 0 ;
  
  result = (ProxyAudioProducer *)new SwigDirector_ProxyAudioProducer();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProxyAudioProducer(void * jarg1) {
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioProducer_prepare(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->prepare(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioProducer_prepareSwigExplicitProxyAudioProducer(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->ProxyAudioProducer::prepare(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioProducer_start(void * jarg1) {
  int jresult ;
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  result = (int)(arg1)->start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioProducer_startSwigExplicitProxyAudioProducer(void * jarg1) {
  int jresult ;
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  result = (int)(arg1)->ProxyAudioProducer::start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioProducer_pause(void * jarg1) {
  int jresult ;
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  result = (int)(arg1)->pause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioProducer_pauseSwigExplicitProxyAudioProducer(void * jarg1) {
  int jresult ;
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  result = (int)(arg1)->ProxyAudioProducer::pause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioProducer_stop(void * jarg1) {
  int jresult ;
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  result = (int)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioProducer_stopSwigExplicitProxyAudioProducer(void * jarg1) {
  int jresult ;
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  int result;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  result = (int)(arg1)->ProxyAudioProducer::stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProxyAudioProducer_setActivate(void * jarg1, unsigned int jarg2) {
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  bool arg2 ;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActivate(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyAudioProducer_push(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  ProxyAudioProducer *arg1 = (ProxyAudioProducer *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ProxyAudioProducer *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->push((void const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProxyAudioProducer_registerPlugin() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ProxyAudioProducer::registerPlugin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProxyAudioProducer_director_connect(void *objarg, SwigDirector_ProxyAudioProducer::SWIG_Callback0_t callback0, SwigDirector_ProxyAudioProducer::SWIG_Callback1_t callback1, SwigDirector_ProxyAudioProducer::SWIG_Callback2_t callback2, SwigDirector_ProxyAudioProducer::SWIG_Callback3_t callback3) {
  ProxyAudioProducer *obj = (ProxyAudioProducer *)objarg;
  SwigDirector_ProxyAudioProducer *director = dynamic_cast<SwigDirector_ProxyAudioProducer *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_ProxyVideoProducer(int jarg1) {
  void * jresult ;
  tmedia_chroma_t arg1 ;
  ProxyVideoProducer *result = 0 ;
  
  arg1 = (tmedia_chroma_t)jarg1; 
  result = (ProxyVideoProducer *)new SwigDirector_ProxyVideoProducer(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_ProxyVideoProducer(void * jarg1) {
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoProducer_prepare(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->prepare(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoProducer_prepareSwigExplicitProxyVideoProducer(void * jarg1, int jarg2, int jarg3, int jarg4) {
  int jresult ;
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  int result;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  arg2 = (int)jarg2; 
  arg3 = (int)jarg3; 
  arg4 = (int)jarg4; 
  result = (int)(arg1)->ProxyVideoProducer::prepare(arg2,arg3,arg4);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoProducer_start(void * jarg1) {
  int jresult ;
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  result = (int)(arg1)->start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoProducer_startSwigExplicitProxyVideoProducer(void * jarg1) {
  int jresult ;
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  result = (int)(arg1)->ProxyVideoProducer::start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoProducer_pause(void * jarg1) {
  int jresult ;
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  result = (int)(arg1)->pause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoProducer_pauseSwigExplicitProxyVideoProducer(void * jarg1) {
  int jresult ;
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  result = (int)(arg1)->ProxyVideoProducer::pause();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoProducer_stop(void * jarg1) {
  int jresult ;
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  result = (int)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoProducer_stopSwigExplicitProxyVideoProducer(void * jarg1) {
  int jresult ;
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  int result;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  result = (int)(arg1)->ProxyVideoProducer::stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProxyVideoProducer_setActivate(void * jarg1, unsigned int jarg2) {
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  bool arg2 ;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  arg2 = jarg2 ? true : false; 
  (arg1)->setActivate(arg2);
}


SWIGEXPORT int SWIGSTDCALL CSharp_ProxyVideoProducer_push(void * jarg1, void * jarg2, unsigned int jarg3) {
  int jresult ;
  ProxyVideoProducer *arg1 = (ProxyVideoProducer *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  int result;
  
  arg1 = (ProxyVideoProducer *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (int)(arg1)->push((void const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_ProxyVideoProducer_registerPlugin() {
  unsigned int jresult ;
  bool result;
  
  result = (bool)ProxyVideoProducer::registerPlugin();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_ProxyVideoProducer_director_connect(void *objarg, SwigDirector_ProxyVideoProducer::SWIG_Callback0_t callback0, SwigDirector_ProxyVideoProducer::SWIG_Callback1_t callback1, SwigDirector_ProxyVideoProducer::SWIG_Callback2_t callback2, SwigDirector_ProxyVideoProducer::SWIG_Callback3_t callback3) {
  ProxyVideoProducer *obj = (ProxyVideoProducer *)objarg;
  SwigDirector_ProxyVideoProducer *director = dynamic_cast<SwigDirector_ProxyVideoProducer *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipCallback() {
  void * jresult ;
  SipCallback *result = 0 ;
  
  result = (SipCallback *)new SwigDirector_SipCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipCallback(void * jarg1) {
  SipCallback *arg1 = (SipCallback *) 0 ;
  
  arg1 = (SipCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnDialogEvent(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  DialogEvent *arg2 = (DialogEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (DialogEvent *)jarg2; 
  result = (int)(arg1)->OnDialogEvent((DialogEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnDialogEventSwigExplicitSipCallback(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  DialogEvent *arg2 = (DialogEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (DialogEvent *)jarg2; 
  result = (int)(arg1)->SipCallback::OnDialogEvent((DialogEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnStackEvent(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  StackEvent *arg2 = (StackEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (StackEvent *)jarg2; 
  result = (int)(arg1)->OnStackEvent((StackEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnStackEventSwigExplicitSipCallback(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  StackEvent *arg2 = (StackEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (StackEvent *)jarg2; 
  result = (int)(arg1)->SipCallback::OnStackEvent((StackEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnCallEvent(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  CallEvent *arg2 = (CallEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (CallEvent *)jarg2; 
  result = (int)(arg1)->OnCallEvent((CallEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnCallEventSwigExplicitSipCallback(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  CallEvent *arg2 = (CallEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (CallEvent *)jarg2; 
  result = (int)(arg1)->SipCallback::OnCallEvent((CallEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnMessagingEvent(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  MessagingEvent *arg2 = (MessagingEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (MessagingEvent *)jarg2; 
  result = (int)(arg1)->OnMessagingEvent((MessagingEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnMessagingEventSwigExplicitSipCallback(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  MessagingEvent *arg2 = (MessagingEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (MessagingEvent *)jarg2; 
  result = (int)(arg1)->SipCallback::OnMessagingEvent((MessagingEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnOptionsEvent(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  OptionsEvent *arg2 = (OptionsEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (OptionsEvent *)jarg2; 
  result = (int)(arg1)->OnOptionsEvent((OptionsEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnOptionsEventSwigExplicitSipCallback(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  OptionsEvent *arg2 = (OptionsEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (OptionsEvent *)jarg2; 
  result = (int)(arg1)->SipCallback::OnOptionsEvent((OptionsEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnPublicationEvent(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  PublicationEvent *arg2 = (PublicationEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (PublicationEvent *)jarg2; 
  result = (int)(arg1)->OnPublicationEvent((PublicationEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnPublicationEventSwigExplicitSipCallback(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  PublicationEvent *arg2 = (PublicationEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (PublicationEvent *)jarg2; 
  result = (int)(arg1)->SipCallback::OnPublicationEvent((PublicationEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnRegistrationEvent(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  RegistrationEvent *arg2 = (RegistrationEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (RegistrationEvent *)jarg2; 
  result = (int)(arg1)->OnRegistrationEvent((RegistrationEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnRegistrationEventSwigExplicitSipCallback(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  RegistrationEvent *arg2 = (RegistrationEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (RegistrationEvent *)jarg2; 
  result = (int)(arg1)->SipCallback::OnRegistrationEvent((RegistrationEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnSubscriptionEvent(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  SubscriptionEvent *arg2 = (SubscriptionEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (SubscriptionEvent *)jarg2; 
  result = (int)(arg1)->OnSubscriptionEvent((SubscriptionEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SipCallback_OnSubscriptionEventSwigExplicitSipCallback(void * jarg1, void * jarg2) {
  int jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  SubscriptionEvent *arg2 = (SubscriptionEvent *) 0 ;
  int result;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (SubscriptionEvent *)jarg2; 
  result = (int)(arg1)->SipCallback::OnSubscriptionEvent((SubscriptionEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipCallback_director_connect(void *objarg, SwigDirector_SipCallback::SWIG_Callback0_t callback0, SwigDirector_SipCallback::SWIG_Callback1_t callback1, SwigDirector_SipCallback::SWIG_Callback2_t callback2, SwigDirector_SipCallback::SWIG_Callback3_t callback3, SwigDirector_SipCallback::SWIG_Callback4_t callback4, SwigDirector_SipCallback::SWIG_Callback5_t callback5, SwigDirector_SipCallback::SWIG_Callback6_t callback6, SwigDirector_SipCallback::SWIG_Callback7_t callback7) {
  SipCallback *obj = (SipCallback *)objarg;
  SwigDirector_SipCallback *director = dynamic_cast<SwigDirector_SipCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0, callback1, callback2, callback3, callback4, callback5, callback6, callback7);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SafeObject() {
  void * jresult ;
  SafeObject *result = 0 ;
  
  result = (SafeObject *)new SafeObject();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SafeObject(void * jarg1) {
  SafeObject *arg1 = (SafeObject *) 0 ;
  
  arg1 = (SafeObject *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SafeObject_Lock(void * jarg1) {
  int jresult ;
  SafeObject *arg1 = (SafeObject *) 0 ;
  int result;
  
  arg1 = (SafeObject *)jarg1; 
  result = (int)((SafeObject const *)arg1)->Lock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_SafeObject_UnLock(void * jarg1) {
  int jresult ;
  SafeObject *arg1 = (SafeObject *) 0 ;
  int result;
  
  arg1 = (SafeObject *)jarg1; 
  result = (int)((SafeObject const *)arg1)->UnLock();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_SipStack(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  SipCallback *arg1 = (SipCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  SipStack *result = 0 ;
  
  arg1 = (SipCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (SipStack *)new SipStack(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SipStack(void * jarg1) {
  SipStack *arg1 = (SipStack *) 0 ;
  
  arg1 = (SipStack *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_start(void * jarg1) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  result = (bool)(arg1)->start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setDebugCallback(void * jarg1, void * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  DDebugCallback *arg2 = (DDebugCallback *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (DDebugCallback *)jarg2; 
  result = (bool)(arg1)->setDebugCallback(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setRealm(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setRealm((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setIMPI(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setIMPI((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setIMPU(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setIMPU((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setPassword(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setPassword((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setAMF(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setAMF((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setOperatorId(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setOperatorId((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setProxyCSCF(void * jarg1, char * jarg2, unsigned short jarg3, char * jarg4, char * jarg5) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned short)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (bool)(arg1)->setProxyCSCF((char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setLocalIP(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setLocalIP((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setLocalPort(void * jarg1, unsigned short jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  unsigned short arg2 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (unsigned short)jarg2; 
  result = (bool)(arg1)->setLocalPort(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setEarlyIMS(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setEarlyIMS(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_addHeader(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->addHeader((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_removeHeader(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->removeHeader((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_addDnsServer(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->addDnsServer((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setDnsDiscovery(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  bool arg2 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = jarg2 ? true : false; 
  result = (bool)(arg1)->setDnsDiscovery(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setAoR(void * jarg1, char * jarg2, int jarg3) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  int arg3 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (int)jarg3; 
  result = (bool)(arg1)->setAoR((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setSigCompParams(void * jarg1, unsigned int jarg2, unsigned int jarg3, unsigned int jarg4, unsigned int jarg5) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  unsigned int arg2 ;
  unsigned int arg3 ;
  unsigned int arg4 ;
  bool arg5 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (unsigned int)jarg4; 
  arg5 = jarg5 ? true : false; 
  result = (bool)(arg1)->setSigCompParams(arg2,arg3,arg4,arg5);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_addSigCompCompartment(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->addSigCompCompartment((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_removeSigCompCompartment(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->removeSigCompCompartment((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setSTUNServer(void * jarg1, char * jarg2, unsigned short jarg3) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short arg3 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned short)jarg3; 
  result = (bool)(arg1)->setSTUNServer((char const *)arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_setSTUNCred(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setSTUNCred((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipStack_dnsENUM(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  char * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (char *)(arg1)->dnsENUM((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipStack_dnsNaptrSrv(void * jarg1, char * jarg2, char * jarg3, unsigned short * jarg4) {
  char * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned short *arg4 = (unsigned short *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned short *)jarg4; 
  result = (char *)(arg1)->dnsNaptrSrv((char const *)arg2,(char const *)arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_SipStack_dnsSrv(void * jarg1, char * jarg2, unsigned short * jarg3) {
  char * jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned short *arg3 = (unsigned short *) 0 ;
  char *result = 0 ;
  
  arg1 = (SipStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned short *)jarg3; 
  result = (char *)(arg1)->dnsSrv((char const *)arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_isValid(void * jarg1) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  result = (bool)(arg1)->isValid();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_SipStack_stop(void * jarg1) {
  unsigned int jresult ;
  SipStack *arg1 = (SipStack *) 0 ;
  bool result;
  
  arg1 = (SipStack *)jarg1; 
  result = (bool)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipStack_setCodecs(int jarg1) {
  tdav_codec_id_t arg1 ;
  
  arg1 = (tdav_codec_id_t)jarg1; 
  SipStack::setCodecs(arg1);
}


SWIGEXPORT void SWIGSTDCALL CSharp_SipStack_setCodecs_2(int jarg1) {
  int arg1 ;
  
  arg1 = (int)jarg1; 
  SipStack::setCodecs_2(arg1);
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_transport_error_get() {
  int jresult ;
  int result;
  
  result = (int) 702;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_global_error_get() {
  int jresult ;
  int result;
  
  result = (int) 703;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_message_error_get() {
  int jresult ;
  int result;
  
  result = (int) 704;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_request_incoming_get() {
  int jresult ;
  int result;
  
  result = (int) 800;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_request_cancelled_get() {
  int jresult ;
  int result;
  
  result = (int) 801;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_request_sent_get() {
  int jresult ;
  int result;
  
  result = (int) 802;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_connecting_get() {
  int jresult ;
  int result;
  
  result = (int) 900;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_connected_get() {
  int jresult ;
  int result;
  
  result = (int) 901;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_terminating_get() {
  int jresult ;
  int result;
  
  result = (int) 902;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_dialog_terminated_get() {
  int jresult ;
  int result;
  
  result = (int) 903;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_stack_started_get() {
  int jresult ;
  int result;
  
  result = (int) 950;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_stack_stopped_get() {
  int jresult ;
  int result;
  
  result = (int) 951;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_stack_failed_to_start_get() {
  int jresult ;
  int result;
  
  result = (int) 952;
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_tsip_event_code_stack_failed_to_stop_get() {
  int jresult ;
  int result;
  
  result = (int) 953;
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XcapSelector(void * jarg1) {
  void * jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  XcapSelector *result = 0 ;
  
  arg1 = (XcapStack *)jarg1; 
  result = (XcapSelector *)new XcapSelector(arg1);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XcapSelector(void * jarg1) {
  XcapSelector *arg1 = (XcapSelector *) 0 ;
  
  arg1 = (XcapSelector *)jarg1; 
  delete arg1;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XcapSelector_setAUID(void * jarg1, char * jarg2) {
  void * jresult ;
  XcapSelector *arg1 = (XcapSelector *) 0 ;
  char *arg2 = (char *) 0 ;
  XcapSelector *result = 0 ;
  
  arg1 = (XcapSelector *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (XcapSelector *)(arg1)->setAUID((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XcapSelector_setName(void * jarg1, char * jarg2) {
  void * jresult ;
  XcapSelector *arg1 = (XcapSelector *) 0 ;
  char *arg2 = (char *) 0 ;
  XcapSelector *result = 0 ;
  
  arg1 = (XcapSelector *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (XcapSelector *)(arg1)->setName((char const *)arg2);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XcapSelector_setAttribute(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  XcapSelector *arg1 = (XcapSelector *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  XcapSelector *result = 0 ;
  
  arg1 = (XcapSelector *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (XcapSelector *)(arg1)->setAttribute((char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XcapSelector_setPos(void * jarg1, char * jarg2, unsigned int jarg3) {
  void * jresult ;
  XcapSelector *arg1 = (XcapSelector *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  XcapSelector *result = 0 ;
  
  arg1 = (XcapSelector *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (XcapSelector *)(arg1)->setPos((char const *)arg2,arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XcapSelector_setPosAttribute(void * jarg1, char * jarg2, unsigned int jarg3, char * jarg4, char * jarg5) {
  void * jresult ;
  XcapSelector *arg1 = (XcapSelector *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char *arg4 = (char *) 0 ;
  char *arg5 = (char *) 0 ;
  XcapSelector *result = 0 ;
  
  arg1 = (XcapSelector *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  arg4 = (char *)jarg4; 
  arg5 = (char *)jarg5; 
  result = (XcapSelector *)(arg1)->setPosAttribute((char const *)arg2,arg3,(char const *)arg4,(char const *)arg5);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XcapSelector_setNamespace(void * jarg1, char * jarg2, char * jarg3) {
  void * jresult ;
  XcapSelector *arg1 = (XcapSelector *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  XcapSelector *result = 0 ;
  
  arg1 = (XcapSelector *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (XcapSelector *)(arg1)->setNamespace((char const *)arg2,(char const *)arg3);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XcapSelector_getString(void * jarg1) {
  char * jresult ;
  XcapSelector *arg1 = (XcapSelector *) 0 ;
  char *result = 0 ;
  
  arg1 = (XcapSelector *)jarg1; 
  result = (char *)(arg1)->getString();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XcapSelector_reset(void * jarg1) {
  XcapSelector *arg1 = (XcapSelector *) 0 ;
  
  arg1 = (XcapSelector *)jarg1; 
  (arg1)->reset();
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XcapMessage() {
  void * jresult ;
  XcapMessage *result = 0 ;
  
  result = (XcapMessage *)new XcapMessage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XcapMessage(void * jarg1) {
  XcapMessage *arg1 = (XcapMessage *) 0 ;
  
  arg1 = (XcapMessage *)jarg1; 
  delete arg1;
}


SWIGEXPORT short SWIGSTDCALL CSharp_XcapMessage_getCode(void * jarg1) {
  short jresult ;
  XcapMessage *arg1 = (XcapMessage *) 0 ;
  short result;
  
  arg1 = (XcapMessage *)jarg1; 
  result = (short)((XcapMessage const *)arg1)->getCode();
  jresult = result; 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XcapMessage_getPhrase(void * jarg1) {
  char * jresult ;
  XcapMessage *arg1 = (XcapMessage *) 0 ;
  char *result = 0 ;
  
  arg1 = (XcapMessage *)jarg1; 
  result = (char *)((XcapMessage const *)arg1)->getPhrase();
  jresult = SWIG_csharp_string_callback((const char *)result); 
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XcapMessage_getXcapHeaderValue__SWIG_0(void * jarg1, char * jarg2, unsigned int jarg3) {
  char * jresult ;
  XcapMessage *arg1 = (XcapMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  unsigned int arg3 ;
  char *result = 0 ;
  
  arg1 = (XcapMessage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (char *)(arg1)->getXcapHeaderValue((char const *)arg2,arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XcapMessage_getXcapHeaderValue__SWIG_1(void * jarg1, char * jarg2) {
  char * jresult ;
  XcapMessage *arg1 = (XcapMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (XcapMessage *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (char *)(arg1)->getXcapHeaderValue((char const *)arg2);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XcapMessage_getXcapHeaderParamValue__SWIG_0(void * jarg1, char * jarg2, char * jarg3, unsigned int jarg4) {
  char * jresult ;
  XcapMessage *arg1 = (XcapMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  unsigned int arg4 ;
  char *result = 0 ;
  
  arg1 = (XcapMessage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (unsigned int)jarg4; 
  result = (char *)(arg1)->getXcapHeaderParamValue((char const *)arg2,(char const *)arg3,arg4);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT char * SWIGSTDCALL CSharp_XcapMessage_getXcapHeaderParamValue__SWIG_1(void * jarg1, char * jarg2, char * jarg3) {
  char * jresult ;
  XcapMessage *arg1 = (XcapMessage *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *result = 0 ;
  
  arg1 = (XcapMessage *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (char *)(arg1)->getXcapHeaderParamValue((char const *)arg2,(char const *)arg3);
  jresult = SWIG_csharp_string_callback((const char *)result); 
  delete [] result;
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapMessage_getXcapContentLength(void * jarg1) {
  unsigned int jresult ;
  XcapMessage *arg1 = (XcapMessage *) 0 ;
  unsigned int result;
  
  arg1 = (XcapMessage *)jarg1; 
  result = (unsigned int)(arg1)->getXcapContentLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapMessage_getXcapContent(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  XcapMessage *arg1 = (XcapMessage *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (XcapMessage *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)(arg1)->getXcapContent(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XcapEvent(void * jarg1) {
  XcapEvent *arg1 = (XcapEvent *) 0 ;
  
  arg1 = (XcapEvent *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XcapEvent_getType(void * jarg1) {
  int jresult ;
  XcapEvent *arg1 = (XcapEvent *) 0 ;
  thttp_event_type_t result;
  
  arg1 = (XcapEvent *)jarg1; 
  result = (thttp_event_type_t)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_XcapEvent_getXcapMessage(void * jarg1) {
  void * jresult ;
  XcapEvent *arg1 = (XcapEvent *) 0 ;
  XcapMessage *result = 0 ;
  
  arg1 = (XcapEvent *)jarg1; 
  result = (XcapMessage *)((XcapEvent const *)arg1)->getXcapMessage();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XcapCallback() {
  void * jresult ;
  XcapCallback *result = 0 ;
  
  result = (XcapCallback *)new SwigDirector_XcapCallback();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XcapCallback(void * jarg1) {
  XcapCallback *arg1 = (XcapCallback *) 0 ;
  
  arg1 = (XcapCallback *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XcapCallback_onEvent(void * jarg1, void * jarg2) {
  int jresult ;
  XcapCallback *arg1 = (XcapCallback *) 0 ;
  XcapEvent *arg2 = (XcapEvent *) 0 ;
  int result;
  
  arg1 = (XcapCallback *)jarg1; 
  arg2 = (XcapEvent *)jarg2; 
  result = (int)((XcapCallback const *)arg1)->onEvent((XcapEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT int SWIGSTDCALL CSharp_XcapCallback_onEventSwigExplicitXcapCallback(void * jarg1, void * jarg2) {
  int jresult ;
  XcapCallback *arg1 = (XcapCallback *) 0 ;
  XcapEvent *arg2 = (XcapEvent *) 0 ;
  int result;
  
  arg1 = (XcapCallback *)jarg1; 
  arg2 = (XcapEvent *)jarg2; 
  result = (int)((XcapCallback const *)arg1)->XcapCallback::onEvent((XcapEvent const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_XcapCallback_director_connect(void *objarg, SwigDirector_XcapCallback::SWIG_Callback0_t callback0) {
  XcapCallback *obj = (XcapCallback *)objarg;
  SwigDirector_XcapCallback *director = dynamic_cast<SwigDirector_XcapCallback *>(obj);
  if (director) {
    director->swig_connect_director(callback0);
  }
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_XcapStack(void * jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  XcapCallback *arg1 = (XcapCallback *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  XcapStack *result = 0 ;
  
  arg1 = (XcapCallback *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (XcapStack *)new XcapStack(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_XcapStack(void * jarg1) {
  XcapStack *arg1 = (XcapStack *) 0 ;
  
  arg1 = (XcapStack *)jarg1; 
  delete arg1;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_start(void * jarg1) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  result = (bool)(arg1)->start();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_setCredentials(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->setCredentials((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_setXcapRoot(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setXcapRoot((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_setLocalIP(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->setLocalIP((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_setLocalPort(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->setLocalPort(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_addHeader(void * jarg1, char * jarg2, char * jarg3) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  result = (bool)(arg1)->addHeader((char const *)arg2,(char const *)arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_removeHeader(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->removeHeader((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_setTimeout(void * jarg1, unsigned int jarg2) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  unsigned int arg2 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  arg2 = (unsigned int)jarg2; 
  result = (bool)(arg1)->setTimeout(arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_getDocument(void * jarg1, char * jarg2) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  char *arg2 = (char *) 0 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  arg2 = (char *)jarg2; 
  result = (bool)(arg1)->getDocument((char const *)arg2);
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_XcapStack_stop(void * jarg1) {
  unsigned int jresult ;
  XcapStack *arg1 = (XcapStack *) 0 ;
  bool result;
  
  arg1 = (XcapStack *)jarg1; 
  result = (bool)(arg1)->stop();
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_new_RPData() {
  void * jresult ;
  RPData *result = 0 ;
  
  result = (RPData *)new RPData();
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_RPData(void * jarg1) {
  RPData *arg1 = (RPData *) 0 ;
  
  arg1 = (RPData *)jarg1; 
  delete arg1;
}


SWIGEXPORT int SWIGSTDCALL CSharp_RPData_getType(void * jarg1) {
  int jresult ;
  RPData *arg1 = (RPData *) 0 ;
  twrap_rpdata_type_t result;
  
  arg1 = (RPData *)jarg1; 
  result = (twrap_rpdata_type_t)(arg1)->getType();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RPData_getPayloadLength(void * jarg1) {
  unsigned int jresult ;
  RPData *arg1 = (RPData *) 0 ;
  unsigned int result;
  
  arg1 = (RPData *)jarg1; 
  result = (unsigned int)(arg1)->getPayloadLength();
  jresult = result; 
  return jresult;
}


SWIGEXPORT unsigned int SWIGSTDCALL CSharp_RPData_getPayload(void * jarg1, void * jarg2, unsigned int jarg3) {
  unsigned int jresult ;
  RPData *arg1 = (RPData *) 0 ;
  void *arg2 = (void *) 0 ;
  unsigned int arg3 ;
  unsigned int result;
  
  arg1 = (RPData *)jarg1; 
  arg2 = jarg2; 
  arg3 = (unsigned int)jarg3; 
  result = (unsigned int)(arg1)->getPayload(arg2,arg3);
  jresult = result; 
  return jresult;
}


SWIGEXPORT void * SWIGSTDCALL CSharp_SMSEncoder_encodeSubmit(int jarg1, char * jarg2, char * jarg3, char * jarg4) {
  void * jresult ;
  int arg1 ;
  char *arg2 = (char *) 0 ;
  char *arg3 = (char *) 0 ;
  char *arg4 = (char *) 0 ;
  RPData *result = 0 ;
  
  arg1 = (int)jarg1; 
  arg2 = (char *)jarg2; 
  arg3 = (char *)jarg3; 
  arg4 = (char *)jarg4; 
  result = (RPData *)SMSEncoder::encodeSubmit(arg1,(char const *)arg2,(char const *)arg3,(char const *)arg4);
  jresult = (void *)result; 
  return jresult;
}


SWIGEXPORT void SWIGSTDCALL CSharp_delete_SMSEncoder(void * jarg1) {
  SMSEncoder *arg1 = (SMSEncoder *) 0 ;
  
  arg1 = (SMSEncoder *)jarg1; 
  delete arg1;
}


SWIGEXPORT SipEvent * SWIGSTDCALL CSharp_DialogEventUpcast(DialogEvent *objectRef) {
    return (SipEvent *)objectRef;
}

SWIGEXPORT SipEvent * SWIGSTDCALL CSharp_StackEventUpcast(StackEvent *objectRef) {
    return (SipEvent *)objectRef;
}

SWIGEXPORT SipEvent * SWIGSTDCALL CSharp_CallEventUpcast(CallEvent *objectRef) {
    return (SipEvent *)objectRef;
}

SWIGEXPORT SipEvent * SWIGSTDCALL CSharp_MessagingEventUpcast(MessagingEvent *objectRef) {
    return (SipEvent *)objectRef;
}

SWIGEXPORT SipEvent * SWIGSTDCALL CSharp_OptionsEventUpcast(OptionsEvent *objectRef) {
    return (SipEvent *)objectRef;
}

SWIGEXPORT SipEvent * SWIGSTDCALL CSharp_PublicationEventUpcast(PublicationEvent *objectRef) {
    return (SipEvent *)objectRef;
}

SWIGEXPORT SipEvent * SWIGSTDCALL CSharp_RegistrationEventUpcast(RegistrationEvent *objectRef) {
    return (SipEvent *)objectRef;
}

SWIGEXPORT SipEvent * SWIGSTDCALL CSharp_SubscriptionEventUpcast(SubscriptionEvent *objectRef) {
    return (SipEvent *)objectRef;
}

SWIGEXPORT SipSession * SWIGSTDCALL CSharp_CallSessionUpcast(CallSession *objectRef) {
    return (SipSession *)objectRef;
}

SWIGEXPORT SipSession * SWIGSTDCALL CSharp_MessagingSessionUpcast(MessagingSession *objectRef) {
    return (SipSession *)objectRef;
}

SWIGEXPORT SipSession * SWIGSTDCALL CSharp_OptionsSessionUpcast(OptionsSession *objectRef) {
    return (SipSession *)objectRef;
}

SWIGEXPORT SipSession * SWIGSTDCALL CSharp_PublicationSessionUpcast(PublicationSession *objectRef) {
    return (SipSession *)objectRef;
}

SWIGEXPORT SipSession * SWIGSTDCALL CSharp_RegistrationSessionUpcast(RegistrationSession *objectRef) {
    return (SipSession *)objectRef;
}

SWIGEXPORT SipSession * SWIGSTDCALL CSharp_SubscriptionSessionUpcast(SubscriptionSession *objectRef) {
    return (SipSession *)objectRef;
}

SWIGEXPORT SafeObject * SWIGSTDCALL CSharp_SipStackUpcast(SipStack *objectRef) {
    return (SafeObject *)objectRef;
}

#ifdef __cplusplus
}
#endif

