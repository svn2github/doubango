/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 1.3.39
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_tinyWRAP_WRAP_H_
#define SWIG_tinyWRAP_WRAP_H_

class SwigDirector_ProxyAudioConsumer : public ProxyAudioConsumer, public Swig::Director {

public:
    SwigDirector_ProxyAudioConsumer();
    virtual ~SwigDirector_ProxyAudioConsumer();
    virtual int prepare(int ptime, int rate, int channels);
    virtual int start();
    virtual int pause();
    virtual int stop();

    typedef int (SWIGSTDCALL* SWIG_Callback0_t)(int, int, int);
    typedef int (SWIGSTDCALL* SWIG_Callback1_t)();
    typedef int (SWIGSTDCALL* SWIG_Callback2_t)();
    typedef int (SWIGSTDCALL* SWIG_Callback3_t)();
    void swig_connect_director(SWIG_Callback0_t callbackprepare, SWIG_Callback1_t callbackstart, SWIG_Callback2_t callbackpause, SWIG_Callback3_t callbackstop);

private:
    SWIG_Callback0_t swig_callbackprepare;
    SWIG_Callback1_t swig_callbackstart;
    SWIG_Callback2_t swig_callbackpause;
    SWIG_Callback3_t swig_callbackstop;
    void swig_init_callbacks();
};

class SwigDirector_ProxyAudioProducer : public ProxyAudioProducer, public Swig::Director {

public:
    SwigDirector_ProxyAudioProducer();
    virtual ~SwigDirector_ProxyAudioProducer();
    virtual int prepare(int ptime, int rate, int channels);
    virtual int start();
    virtual int pause();
    virtual int stop();

    typedef int (SWIGSTDCALL* SWIG_Callback0_t)(int, int, int);
    typedef int (SWIGSTDCALL* SWIG_Callback1_t)();
    typedef int (SWIGSTDCALL* SWIG_Callback2_t)();
    typedef int (SWIGSTDCALL* SWIG_Callback3_t)();
    void swig_connect_director(SWIG_Callback0_t callbackprepare, SWIG_Callback1_t callbackstart, SWIG_Callback2_t callbackpause, SWIG_Callback3_t callbackstop);

private:
    SWIG_Callback0_t swig_callbackprepare;
    SWIG_Callback1_t swig_callbackstart;
    SWIG_Callback2_t swig_callbackpause;
    SWIG_Callback3_t swig_callbackstop;
    void swig_init_callbacks();
};

class SwigDirector_SipCallback : public SipCallback, public Swig::Director {

public:
    SwigDirector_SipCallback();
    virtual ~SwigDirector_SipCallback();
    virtual int OnDialogEvent(DialogEvent const *e);
    virtual int OnStackEvent(StackEvent const *e);
    virtual int OnMessagingEvent(MessagingEvent const *e);
    virtual int OnOptionsEvent(OptionsEvent const *e);
    virtual int OnPublicationEvent(PublicationEvent const *e);
    virtual int OnRegistrationEvent(RegistrationEvent const *e);
    virtual int OnSubscriptionEvent(SubscriptionEvent const *e);

    typedef int (SWIGSTDCALL* SWIG_Callback0_t)(void *);
    typedef int (SWIGSTDCALL* SWIG_Callback1_t)(void *);
    typedef int (SWIGSTDCALL* SWIG_Callback2_t)(void *);
    typedef int (SWIGSTDCALL* SWIG_Callback3_t)(void *);
    typedef int (SWIGSTDCALL* SWIG_Callback4_t)(void *);
    typedef int (SWIGSTDCALL* SWIG_Callback5_t)(void *);
    typedef int (SWIGSTDCALL* SWIG_Callback6_t)(void *);
    void swig_connect_director(SWIG_Callback0_t callbackOnDialogEvent, SWIG_Callback1_t callbackOnStackEvent, SWIG_Callback2_t callbackOnMessagingEvent, SWIG_Callback3_t callbackOnOptionsEvent, SWIG_Callback4_t callbackOnPublicationEvent, SWIG_Callback5_t callbackOnRegistrationEvent, SWIG_Callback6_t callbackOnSubscriptionEvent);

private:
    SWIG_Callback0_t swig_callbackOnDialogEvent;
    SWIG_Callback1_t swig_callbackOnStackEvent;
    SWIG_Callback2_t swig_callbackOnMessagingEvent;
    SWIG_Callback3_t swig_callbackOnOptionsEvent;
    SWIG_Callback4_t swig_callbackOnPublicationEvent;
    SWIG_Callback5_t swig_callbackOnRegistrationEvent;
    SWIG_Callback6_t swig_callbackOnSubscriptionEvent;
    void swig_init_callbacks();
};


#endif
