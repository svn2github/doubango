# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_tinyWRAP', [dirname(__file__)])
            _mod = imp.load_module('_tinyWRAP', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _tinyWRAP = swig_import_helper()
    del swig_import_helper
else:
    import _tinyWRAP
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class SipUri(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipUri, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipUri, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_SipUri(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipUri
    __del__ = lambda self : None;
    def isValid(self, *args): return _tinyWRAP.SipUri_isValid(self, *args)
SipUri_swigregister = _tinyWRAP.SipUri_swigregister
SipUri_swigregister(SipUri)

class SipMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_SipMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipMessage
    __del__ = lambda self : None;
    def getSipHeaderValue(self, *args): return _tinyWRAP.SipMessage_getSipHeaderValue(self, *args)
    def getSipHeaderParamValue(self, *args): return _tinyWRAP.SipMessage_getSipHeaderParamValue(self, *args)
    def getSipContentLength(self): return _tinyWRAP.SipMessage_getSipContentLength(self)
    def getSipContent(self, *args): return _tinyWRAP.SipMessage_getSipContent(self, *args)
SipMessage_swigregister = _tinyWRAP.SipMessage_swigregister
SipMessage_swigregister(SipMessage)

class SipEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_SipEvent
    __del__ = lambda self : None;
    def getCode(self): return _tinyWRAP.SipEvent_getCode(self)
    def getPhrase(self): return _tinyWRAP.SipEvent_getPhrase(self)
    def getBaseSession(self): return _tinyWRAP.SipEvent_getBaseSession(self)
    def getSipMessage(self): return _tinyWRAP.SipEvent_getSipMessage(self)
SipEvent_swigregister = _tinyWRAP.SipEvent_swigregister
SipEvent_swigregister(SipEvent)

class DialogEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DialogEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DialogEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_DialogEvent
    __del__ = lambda self : None;
DialogEvent_swigregister = _tinyWRAP.DialogEvent_swigregister
DialogEvent_swigregister(DialogEvent)

class MessagingEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessagingEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessagingEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_MessagingEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.MessagingEvent_getType(self)
    def getSession(self): return _tinyWRAP.MessagingEvent_getSession(self)
    def takeSessionOwnership(self): return _tinyWRAP.MessagingEvent_takeSessionOwnership(self)
MessagingEvent_swigregister = _tinyWRAP.MessagingEvent_swigregister
MessagingEvent_swigregister(MessagingEvent)

class OptionsEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionsEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptionsEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_OptionsEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.OptionsEvent_getType(self)
    def getSession(self): return _tinyWRAP.OptionsEvent_getSession(self)
OptionsEvent_swigregister = _tinyWRAP.OptionsEvent_swigregister
OptionsEvent_swigregister(OptionsEvent)

class PublicationEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicationEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicationEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_PublicationEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.PublicationEvent_getType(self)
    def getSession(self): return _tinyWRAP.PublicationEvent_getSession(self)
PublicationEvent_swigregister = _tinyWRAP.PublicationEvent_swigregister
PublicationEvent_swigregister(PublicationEvent)

class RegistrationEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistrationEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistrationEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_RegistrationEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.RegistrationEvent_getType(self)
    def getSession(self): return _tinyWRAP.RegistrationEvent_getSession(self)
RegistrationEvent_swigregister = _tinyWRAP.RegistrationEvent_swigregister
RegistrationEvent_swigregister(RegistrationEvent)

class SubscriptionEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriptionEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriptionEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_SubscriptionEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.SubscriptionEvent_getType(self)
    def getSession(self): return _tinyWRAP.SubscriptionEvent_getSession(self)
SubscriptionEvent_swigregister = _tinyWRAP.SubscriptionEvent_swigregister
SubscriptionEvent_swigregister(SubscriptionEvent)

class SipSession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipSession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_SipSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipSession
    __del__ = lambda self : None;
    def haveOwnership(self): return _tinyWRAP.SipSession_haveOwnership(self)
    def addHeader(self, *args): return _tinyWRAP.SipSession_addHeader(self, *args)
    def removeHeader(self, *args): return _tinyWRAP.SipSession_removeHeader(self, *args)
    def addCaps(self, *args): return _tinyWRAP.SipSession_addCaps(self, *args)
    def removeCaps(self, *args): return _tinyWRAP.SipSession_removeCaps(self, *args)
    def setExpires(self, *args): return _tinyWRAP.SipSession_setExpires(self, *args)
    def setFromUri(self, *args): return _tinyWRAP.SipSession_setFromUri(self, *args)
    def setToUri(self, *args): return _tinyWRAP.SipSession_setToUri(self, *args)
    def getId(self): return _tinyWRAP.SipSession_getId(self)
SipSession_swigregister = _tinyWRAP.SipSession_swigregister
SipSession_swigregister(SipSession)

class MessagingSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessagingSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessagingSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_MessagingSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_MessagingSession
    __del__ = lambda self : None;
    def Send(self, *args): return _tinyWRAP.MessagingSession_Send(self, *args)
    def Accept(self): return _tinyWRAP.MessagingSession_Accept(self)
    def Reject(self): return _tinyWRAP.MessagingSession_Reject(self)
MessagingSession_swigregister = _tinyWRAP.MessagingSession_swigregister
MessagingSession_swigregister(MessagingSession)

class OptionsSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionsSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptionsSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_OptionsSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_OptionsSession
    __del__ = lambda self : None;
    def Send(self): return _tinyWRAP.OptionsSession_Send(self)
OptionsSession_swigregister = _tinyWRAP.OptionsSession_swigregister
OptionsSession_swigregister(OptionsSession)

class PublicationSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicationSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicationSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_PublicationSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_PublicationSession
    __del__ = lambda self : None;
    def Publish(self, *args): return _tinyWRAP.PublicationSession_Publish(self, *args)
    def UnPublish(self): return _tinyWRAP.PublicationSession_UnPublish(self)
PublicationSession_swigregister = _tinyWRAP.PublicationSession_swigregister
PublicationSession_swigregister(PublicationSession)

class RegistrationSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistrationSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistrationSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_RegistrationSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_RegistrationSession
    __del__ = lambda self : None;
    def Register(self): return _tinyWRAP.RegistrationSession_Register(self)
    def UnRegister(self): return _tinyWRAP.RegistrationSession_UnRegister(self)
RegistrationSession_swigregister = _tinyWRAP.RegistrationSession_swigregister
RegistrationSession_swigregister(RegistrationSession)

class SubscriptionSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriptionSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriptionSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_SubscriptionSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SubscriptionSession
    __del__ = lambda self : None;
    def Subscribe(self): return _tinyWRAP.SubscriptionSession_Subscribe(self)
    def UnSubscribe(self): return _tinyWRAP.SubscriptionSession_UnSubscribe(self)
SubscriptionSession_swigregister = _tinyWRAP.SubscriptionSession_swigregister
SubscriptionSession_swigregister(SubscriptionSession)

class SipCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == SipCallback:
            _self = None
        else:
            _self = self
        this = _tinyWRAP.new_SipCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipCallback
    __del__ = lambda self : None;
    def OnDialogEvent(self, *args): return _tinyWRAP.SipCallback_OnDialogEvent(self, *args)
    def OnMessagingEvent(self, *args): return _tinyWRAP.SipCallback_OnMessagingEvent(self, *args)
    def OnOptionsEvent(self, *args): return _tinyWRAP.SipCallback_OnOptionsEvent(self, *args)
    def OnPublicationEvent(self, *args): return _tinyWRAP.SipCallback_OnPublicationEvent(self, *args)
    def OnRegistrationEvent(self, *args): return _tinyWRAP.SipCallback_OnRegistrationEvent(self, *args)
    def OnSubscriptionEvent(self, *args): return _tinyWRAP.SipCallback_OnSubscriptionEvent(self, *args)
    def __disown__(self):
        self.this.disown()
        _tinyWRAP.disown_SipCallback(self)
        return weakref_proxy(self)
SipCallback_swigregister = _tinyWRAP.SipCallback_swigregister
SipCallback_swigregister(SipCallback)

class SipDebugCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipDebugCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipDebugCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == SipDebugCallback:
            _self = None
        else:
            _self = self
        this = _tinyWRAP.new_SipDebugCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipDebugCallback
    __del__ = lambda self : None;
    def OnDebugInfo(self, *args): return _tinyWRAP.SipDebugCallback_OnDebugInfo(self, *args)
    def OnDebugWarn(self, *args): return _tinyWRAP.SipDebugCallback_OnDebugWarn(self, *args)
    def OnDebugError(self, *args): return _tinyWRAP.SipDebugCallback_OnDebugError(self, *args)
    def OnDebugFatal(self, *args): return _tinyWRAP.SipDebugCallback_OnDebugFatal(self, *args)
    def __disown__(self):
        self.this.disown()
        _tinyWRAP.disown_SipDebugCallback(self)
        return weakref_proxy(self)
SipDebugCallback_swigregister = _tinyWRAP.SipDebugCallback_swigregister
SipDebugCallback_swigregister(SipDebugCallback)

class SafeObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SafeObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SafeObject, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_SafeObject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SafeObject
    __del__ = lambda self : None;
    def Lock(self): return _tinyWRAP.SafeObject_Lock(self)
    def UnLock(self): return _tinyWRAP.SafeObject_UnLock(self)
SafeObject_swigregister = _tinyWRAP.SafeObject_swigregister
SafeObject_swigregister(SafeObject)

class SipStack(SafeObject):
    __swig_setmethods__ = {}
    for _s in [SafeObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipStack, name, value)
    __swig_getmethods__ = {}
    for _s in [SafeObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SipStack, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_SipStack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipStack
    __del__ = lambda self : None;
    def start(self): return _tinyWRAP.SipStack_start(self)
    def setDebugCallback(self, *args): return _tinyWRAP.SipStack_setDebugCallback(self, *args)
    def setRealm(self, *args): return _tinyWRAP.SipStack_setRealm(self, *args)
    def setIMPI(self, *args): return _tinyWRAP.SipStack_setIMPI(self, *args)
    def setIMPU(self, *args): return _tinyWRAP.SipStack_setIMPU(self, *args)
    def setPassword(self, *args): return _tinyWRAP.SipStack_setPassword(self, *args)
    def setProxyCSCF(self, *args): return _tinyWRAP.SipStack_setProxyCSCF(self, *args)
    def setLocalIP(self, *args): return _tinyWRAP.SipStack_setLocalIP(self, *args)
    def setLocalPort(self, *args): return _tinyWRAP.SipStack_setLocalPort(self, *args)
    def setEarlyIMS(self, *args): return _tinyWRAP.SipStack_setEarlyIMS(self, *args)
    def addHeader(self, *args): return _tinyWRAP.SipStack_addHeader(self, *args)
    def removeHeader(self, *args): return _tinyWRAP.SipStack_removeHeader(self, *args)
    def addDnsServer(self, *args): return _tinyWRAP.SipStack_addDnsServer(self, *args)
    def setAoR(self, *args): return _tinyWRAP.SipStack_setAoR(self, *args)
    def isValid(self): return _tinyWRAP.SipStack_isValid(self)
    def stop(self): return _tinyWRAP.SipStack_stop(self)
SipStack_swigregister = _tinyWRAP.SipStack_swigregister
SipStack_swigregister(SipStack)

tsip_event_invite = _tinyWRAP.tsip_event_invite
tsip_event_message = _tinyWRAP.tsip_event_message
tsip_event_options = _tinyWRAP.tsip_event_options
tsip_event_publish = _tinyWRAP.tsip_event_publish
tsip_event_register = _tinyWRAP.tsip_event_register
tsip_event_subscribe = _tinyWRAP.tsip_event_subscribe
tsip_event_dialog = _tinyWRAP.tsip_event_dialog
tsip_i_register = _tinyWRAP.tsip_i_register
tsip_ai_register = _tinyWRAP.tsip_ai_register
tsip_o_register = _tinyWRAP.tsip_o_register
tsip_ao_register = _tinyWRAP.tsip_ao_register
tsip_i_unregister = _tinyWRAP.tsip_i_unregister
tsip_ai_unregister = _tinyWRAP.tsip_ai_unregister
tsip_o_unregister = _tinyWRAP.tsip_o_unregister
tsip_ao_unregister = _tinyWRAP.tsip_ao_unregister
tsip_i_subscribe = _tinyWRAP.tsip_i_subscribe
tsip_ai_subscribe = _tinyWRAP.tsip_ai_subscribe
tsip_o_subscribe = _tinyWRAP.tsip_o_subscribe
tsip_ao_subscribe = _tinyWRAP.tsip_ao_subscribe
tsip_i_unsubscribe = _tinyWRAP.tsip_i_unsubscribe
tsip_ai_unsubscribe = _tinyWRAP.tsip_ai_unsubscribe
tsip_o_unsubscribe = _tinyWRAP.tsip_o_unsubscribe
tsip_ao_unsubscribe = _tinyWRAP.tsip_ao_unsubscribe
tsip_i_notify = _tinyWRAP.tsip_i_notify
tsip_ai_notify = _tinyWRAP.tsip_ai_notify
tsip_o_notify = _tinyWRAP.tsip_o_notify
tsip_ao_notify = _tinyWRAP.tsip_ao_notify
tsip_i_publish = _tinyWRAP.tsip_i_publish
tsip_ai_publish = _tinyWRAP.tsip_ai_publish
tsip_o_publish = _tinyWRAP.tsip_o_publish
tsip_ao_publish = _tinyWRAP.tsip_ao_publish
tsip_i_unpublish = _tinyWRAP.tsip_i_unpublish
tsip_ai_unpublish = _tinyWRAP.tsip_ai_unpublish
tsip_o_unpublish = _tinyWRAP.tsip_o_unpublish
tsip_ao_unpublish = _tinyWRAP.tsip_ao_unpublish
tsip_i_message = _tinyWRAP.tsip_i_message
tsip_ai_message = _tinyWRAP.tsip_ai_message
tsip_o_message = _tinyWRAP.tsip_o_message
tsip_ao_message = _tinyWRAP.tsip_ao_message
tsip_i_options = _tinyWRAP.tsip_i_options
tsip_ai_options = _tinyWRAP.tsip_ai_options
tsip_o_options = _tinyWRAP.tsip_o_options
tsip_ao_options = _tinyWRAP.tsip_ao_options


