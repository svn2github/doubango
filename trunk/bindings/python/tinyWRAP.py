# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.39
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        try:
            fp, pathname, description = imp.find_module('_tinyWRAP', [dirname(__file__)])
            _mod = imp.load_module('_tinyWRAP', fp, pathname, description)
        finally:
            if fp is not None: fp.close()
        return _mod
    _tinyWRAP = swig_import_helper()
    del swig_import_helper
else:
    import _tinyWRAP
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


try:
    import weakref
    weakref_proxy = weakref.proxy
except:
    weakref_proxy = lambda x: x


class DDebugCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, DDebugCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, DDebugCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_DDebugCallback()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_DDebugCallback
    __del__ = lambda self : None;
    def OnDebugInfo(self, *args): return _tinyWRAP.DDebugCallback_OnDebugInfo(self, *args)
    def OnDebugWarn(self, *args): return _tinyWRAP.DDebugCallback_OnDebugWarn(self, *args)
    def OnDebugError(self, *args): return _tinyWRAP.DDebugCallback_OnDebugError(self, *args)
    def OnDebugFatal(self, *args): return _tinyWRAP.DDebugCallback_OnDebugFatal(self, *args)
DDebugCallback_swigregister = _tinyWRAP.DDebugCallback_swigregister
DDebugCallback_swigregister(DDebugCallback)

twrap_media_none = _tinyWRAP.twrap_media_none
twrap_media_audio = _tinyWRAP.twrap_media_audio
twrap_media_video = _tinyWRAP.twrap_media_video
twrap_media_audiovideo = _tinyWRAP.twrap_media_audiovideo
twrap_media_msrp = _tinyWRAP.twrap_media_msrp
class ActionConfig(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ActionConfig, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ActionConfig, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_ActionConfig()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_ActionConfig
    __del__ = lambda self : None;
    def addHeader(self, *args): return _tinyWRAP.ActionConfig_addHeader(self, *args)
    def setMediaString(self, *args): return _tinyWRAP.ActionConfig_setMediaString(self, *args)
    def setMediaInt(self, *args): return _tinyWRAP.ActionConfig_setMediaInt(self, *args)
ActionConfig_swigregister = _tinyWRAP.ActionConfig_swigregister
ActionConfig_swigregister(ActionConfig)

class SipUri(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipUri, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipUri, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_SipUri(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipUri
    __del__ = lambda self : None;
    def isValid(self, *args): return _tinyWRAP.SipUri_isValid(self, *args)
    def getScheme(self): return _tinyWRAP.SipUri_getScheme(self)
    def getHost(self): return _tinyWRAP.SipUri_getHost(self)
    def getPort(self): return _tinyWRAP.SipUri_getPort(self)
    def getUserName(self): return _tinyWRAP.SipUri_getUserName(self)
    def getPassword(self): return _tinyWRAP.SipUri_getPassword(self)
    def getDisplayName(self): return _tinyWRAP.SipUri_getDisplayName(self)
    def getParamValue(self, *args): return _tinyWRAP.SipUri_getParamValue(self, *args)
SipUri_swigregister = _tinyWRAP.SipUri_swigregister
SipUri_swigregister(SipUri)

class SdpMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SdpMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SdpMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_SdpMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SdpMessage
    __del__ = lambda self : None;
    def getSdpHeaderValue(self, *args): return _tinyWRAP.SdpMessage_getSdpHeaderValue(self, *args)
    def getSdpHeaderAValue(self, *args): return _tinyWRAP.SdpMessage_getSdpHeaderAValue(self, *args)
SdpMessage_swigregister = _tinyWRAP.SdpMessage_swigregister
SdpMessage_swigregister(SdpMessage)

class SipMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_SipMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipMessage
    __del__ = lambda self : None;
    def getSipHeaderValue(self, *args): return _tinyWRAP.SipMessage_getSipHeaderValue(self, *args)
    def getSipHeaderParamValue(self, *args): return _tinyWRAP.SipMessage_getSipHeaderParamValue(self, *args)
    def getSipContentLength(self): return _tinyWRAP.SipMessage_getSipContentLength(self)
    def getSipContent(self, *args): return _tinyWRAP.SipMessage_getSipContent(self, *args)
    def getSdpMessage(self): return _tinyWRAP.SipMessage_getSdpMessage(self)
SipMessage_swigregister = _tinyWRAP.SipMessage_swigregister
SipMessage_swigregister(SipMessage)

class SipEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_SipEvent
    __del__ = lambda self : None;
    def getCode(self): return _tinyWRAP.SipEvent_getCode(self)
    def getPhrase(self): return _tinyWRAP.SipEvent_getPhrase(self)
    def getBaseSession(self): return _tinyWRAP.SipEvent_getBaseSession(self)
    def getSipMessage(self): return _tinyWRAP.SipEvent_getSipMessage(self)
SipEvent_swigregister = _tinyWRAP.SipEvent_swigregister
SipEvent_swigregister(SipEvent)

class DialogEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, DialogEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, DialogEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_DialogEvent
    __del__ = lambda self : None;
DialogEvent_swigregister = _tinyWRAP.DialogEvent_swigregister
DialogEvent_swigregister(DialogEvent)

class StackEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, StackEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, StackEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_StackEvent
    __del__ = lambda self : None;
StackEvent_swigregister = _tinyWRAP.StackEvent_swigregister
StackEvent_swigregister(StackEvent)

class InviteEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InviteEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InviteEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_InviteEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.InviteEvent_getType(self)
    def getMediaType(self): return _tinyWRAP.InviteEvent_getMediaType(self)
    def getSession(self): return _tinyWRAP.InviteEvent_getSession(self)
    def takeCallSessionOwnership(self): return _tinyWRAP.InviteEvent_takeCallSessionOwnership(self)
    def takeMsrpSessionOwnership(self): return _tinyWRAP.InviteEvent_takeMsrpSessionOwnership(self)
InviteEvent_swigregister = _tinyWRAP.InviteEvent_swigregister
InviteEvent_swigregister(InviteEvent)

class MessagingEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessagingEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessagingEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_MessagingEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.MessagingEvent_getType(self)
    def getSession(self): return _tinyWRAP.MessagingEvent_getSession(self)
    def takeSessionOwnership(self): return _tinyWRAP.MessagingEvent_takeSessionOwnership(self)
MessagingEvent_swigregister = _tinyWRAP.MessagingEvent_swigregister
MessagingEvent_swigregister(MessagingEvent)

class OptionsEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionsEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptionsEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_OptionsEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.OptionsEvent_getType(self)
    def getSession(self): return _tinyWRAP.OptionsEvent_getSession(self)
OptionsEvent_swigregister = _tinyWRAP.OptionsEvent_swigregister
OptionsEvent_swigregister(OptionsEvent)

class PublicationEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicationEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicationEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_PublicationEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.PublicationEvent_getType(self)
    def getSession(self): return _tinyWRAP.PublicationEvent_getSession(self)
PublicationEvent_swigregister = _tinyWRAP.PublicationEvent_swigregister
PublicationEvent_swigregister(PublicationEvent)

class RegistrationEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistrationEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistrationEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_RegistrationEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.RegistrationEvent_getType(self)
    def getSession(self): return _tinyWRAP.RegistrationEvent_getSession(self)
RegistrationEvent_swigregister = _tinyWRAP.RegistrationEvent_swigregister
RegistrationEvent_swigregister(RegistrationEvent)

class SubscriptionEvent(SipEvent):
    __swig_setmethods__ = {}
    for _s in [SipEvent]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriptionEvent, name, value)
    __swig_getmethods__ = {}
    for _s in [SipEvent]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriptionEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_SubscriptionEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.SubscriptionEvent_getType(self)
    def getSession(self): return _tinyWRAP.SubscriptionEvent_getSession(self)
SubscriptionEvent_swigregister = _tinyWRAP.SubscriptionEvent_swigregister
SubscriptionEvent_swigregister(SubscriptionEvent)

class SipSession(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipSession, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_SipSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipSession
    __del__ = lambda self : None;
    def haveOwnership(self): return _tinyWRAP.SipSession_haveOwnership(self)
    def addHeader(self, *args): return _tinyWRAP.SipSession_addHeader(self, *args)
    def removeHeader(self, *args): return _tinyWRAP.SipSession_removeHeader(self, *args)
    def addCaps(self, *args): return _tinyWRAP.SipSession_addCaps(self, *args)
    def removeCaps(self, *args): return _tinyWRAP.SipSession_removeCaps(self, *args)
    def setExpires(self, *args): return _tinyWRAP.SipSession_setExpires(self, *args)
    def setFromUri(self, *args): return _tinyWRAP.SipSession_setFromUri(self, *args)
    def setToUri(self, *args): return _tinyWRAP.SipSession_setToUri(self, *args)
    def setSilentHangup(self, *args): return _tinyWRAP.SipSession_setSilentHangup(self, *args)
    def addSigCompCompartment(self, *args): return _tinyWRAP.SipSession_addSigCompCompartment(self, *args)
    def removeSigCompCompartment(self): return _tinyWRAP.SipSession_removeSigCompCompartment(self)
    def getId(self): return _tinyWRAP.SipSession_getId(self)
SipSession_swigregister = _tinyWRAP.SipSession_swigregister
SipSession_swigregister(SipSession)

class InviteSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, InviteSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, InviteSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_InviteSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_InviteSession
    __del__ = lambda self : None;
    def accept(self, *args): return _tinyWRAP.InviteSession_accept(self, *args)
    def hangup(self, *args): return _tinyWRAP.InviteSession_hangup(self, *args)
    def reject(self, *args): return _tinyWRAP.InviteSession_reject(self, *args)
InviteSession_swigregister = _tinyWRAP.InviteSession_swigregister
InviteSession_swigregister(InviteSession)

class CallSession(InviteSession):
    __swig_setmethods__ = {}
    for _s in [InviteSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CallSession, name, value)
    __swig_getmethods__ = {}
    for _s in [InviteSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CallSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_CallSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_CallSession
    __del__ = lambda self : None;
    def callAudio(self, *args): return _tinyWRAP.CallSession_callAudio(self, *args)
    def callAudioVideo(self, *args): return _tinyWRAP.CallSession_callAudioVideo(self, *args)
    def callVideo(self, *args): return _tinyWRAP.CallSession_callVideo(self, *args)
    def setSessionTimer(self, *args): return _tinyWRAP.CallSession_setSessionTimer(self, *args)
    def set100rel(self, *args): return _tinyWRAP.CallSession_set100rel(self, *args)
    def setQoS(self, *args): return _tinyWRAP.CallSession_setQoS(self, *args)
    def hold(self, *args): return _tinyWRAP.CallSession_hold(self, *args)
    def resume(self, *args): return _tinyWRAP.CallSession_resume(self, *args)
    def sendDTMF(self, *args): return _tinyWRAP.CallSession_sendDTMF(self, *args)
CallSession_swigregister = _tinyWRAP.CallSession_swigregister
CallSession_swigregister(CallSession)

class MsrpSession(InviteSession):
    __swig_setmethods__ = {}
    for _s in [InviteSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsrpSession, name, value)
    __swig_getmethods__ = {}
    for _s in [InviteSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MsrpSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_MsrpSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_MsrpSession
    __del__ = lambda self : None;
    def setCallback(self, *args): return _tinyWRAP.MsrpSession_setCallback(self, *args)
    def callMsrp(self, *args): return _tinyWRAP.MsrpSession_callMsrp(self, *args)
    def sendLMessage(self, *args): return _tinyWRAP.MsrpSession_sendLMessage(self, *args)
    def sendFile(self, *args): return _tinyWRAP.MsrpSession_sendFile(self, *args)
MsrpSession_swigregister = _tinyWRAP.MsrpSession_swigregister
MsrpSession_swigregister(MsrpSession)

class MessagingSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MessagingSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MessagingSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_MessagingSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_MessagingSession
    __del__ = lambda self : None;
    def send(self, *args): return _tinyWRAP.MessagingSession_send(self, *args)
    def accept(self): return _tinyWRAP.MessagingSession_accept(self)
    def reject(self): return _tinyWRAP.MessagingSession_reject(self)
MessagingSession_swigregister = _tinyWRAP.MessagingSession_swigregister
MessagingSession_swigregister(MessagingSession)

class OptionsSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, OptionsSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, OptionsSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_OptionsSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_OptionsSession
    __del__ = lambda self : None;
    def send(self): return _tinyWRAP.OptionsSession_send(self)
OptionsSession_swigregister = _tinyWRAP.OptionsSession_swigregister
OptionsSession_swigregister(OptionsSession)

class PublicationSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, PublicationSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, PublicationSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_PublicationSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_PublicationSession
    __del__ = lambda self : None;
    def publish(self, *args): return _tinyWRAP.PublicationSession_publish(self, *args)
    def unPublish(self): return _tinyWRAP.PublicationSession_unPublish(self)
PublicationSession_swigregister = _tinyWRAP.PublicationSession_swigregister
PublicationSession_swigregister(PublicationSession)

class RegistrationSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, RegistrationSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, RegistrationSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_RegistrationSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_RegistrationSession
    __del__ = lambda self : None;
    def register_(self): return _tinyWRAP.RegistrationSession_register_(self)
    def unRegister(self): return _tinyWRAP.RegistrationSession_unRegister(self)
RegistrationSession_swigregister = _tinyWRAP.RegistrationSession_swigregister
RegistrationSession_swigregister(RegistrationSession)

class SubscriptionSession(SipSession):
    __swig_setmethods__ = {}
    for _s in [SipSession]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SubscriptionSession, name, value)
    __swig_getmethods__ = {}
    for _s in [SipSession]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SubscriptionSession, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_SubscriptionSession(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SubscriptionSession
    __del__ = lambda self : None;
    def subscribe(self): return _tinyWRAP.SubscriptionSession_subscribe(self)
    def unSubscribe(self): return _tinyWRAP.SubscriptionSession_unSubscribe(self)
SubscriptionSession_swigregister = _tinyWRAP.SubscriptionSession_swigregister
SubscriptionSession_swigregister(SubscriptionSession)

class ProxyAudioConsumer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyAudioConsumer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyAudioConsumer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ProxyAudioConsumer:
            _self = None
        else:
            _self = self
        this = _tinyWRAP.new_ProxyAudioConsumer(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_ProxyAudioConsumer
    __del__ = lambda self : None;
    def prepare(self, *args): return _tinyWRAP.ProxyAudioConsumer_prepare(self, *args)
    def start(self): return _tinyWRAP.ProxyAudioConsumer_start(self)
    def pause(self): return _tinyWRAP.ProxyAudioConsumer_pause(self)
    def stop(self): return _tinyWRAP.ProxyAudioConsumer_stop(self)
    def setActivate(self, *args): return _tinyWRAP.ProxyAudioConsumer_setActivate(self, *args)
    def pull(self, *args): return _tinyWRAP.ProxyAudioConsumer_pull(self, *args)
    __swig_getmethods__["registerPlugin"] = lambda x: _tinyWRAP.ProxyAudioConsumer_registerPlugin
    if _newclass:registerPlugin = staticmethod(_tinyWRAP.ProxyAudioConsumer_registerPlugin)
    def __disown__(self):
        self.this.disown()
        _tinyWRAP.disown_ProxyAudioConsumer(self)
        return weakref_proxy(self)
ProxyAudioConsumer_swigregister = _tinyWRAP.ProxyAudioConsumer_swigregister
ProxyAudioConsumer_swigregister(ProxyAudioConsumer)

def ProxyAudioConsumer_registerPlugin():
  return _tinyWRAP.ProxyAudioConsumer_registerPlugin()
ProxyAudioConsumer_registerPlugin = _tinyWRAP.ProxyAudioConsumer_registerPlugin

class ProxyVideoConsumer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyVideoConsumer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyVideoConsumer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ProxyVideoConsumer:
            _self = None
        else:
            _self = self
        this = _tinyWRAP.new_ProxyVideoConsumer(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_ProxyVideoConsumer
    __del__ = lambda self : None;
    def prepare(self, *args): return _tinyWRAP.ProxyVideoConsumer_prepare(self, *args)
    def consume(self, *args): return _tinyWRAP.ProxyVideoConsumer_consume(self, *args)
    def start(self): return _tinyWRAP.ProxyVideoConsumer_start(self)
    def pause(self): return _tinyWRAP.ProxyVideoConsumer_pause(self)
    def stop(self): return _tinyWRAP.ProxyVideoConsumer_stop(self)
    def setActivate(self, *args): return _tinyWRAP.ProxyVideoConsumer_setActivate(self, *args)
    def setDisplaySize(self, *args): return _tinyWRAP.ProxyVideoConsumer_setDisplaySize(self, *args)
    __swig_getmethods__["registerPlugin"] = lambda x: _tinyWRAP.ProxyVideoConsumer_registerPlugin
    if _newclass:registerPlugin = staticmethod(_tinyWRAP.ProxyVideoConsumer_registerPlugin)
    def __disown__(self):
        self.this.disown()
        _tinyWRAP.disown_ProxyVideoConsumer(self)
        return weakref_proxy(self)
ProxyVideoConsumer_swigregister = _tinyWRAP.ProxyVideoConsumer_swigregister
ProxyVideoConsumer_swigregister(ProxyVideoConsumer)

def ProxyVideoConsumer_registerPlugin():
  return _tinyWRAP.ProxyVideoConsumer_registerPlugin()
ProxyVideoConsumer_registerPlugin = _tinyWRAP.ProxyVideoConsumer_registerPlugin

class ProxyVideoFrame(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyVideoFrame, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyVideoFrame, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_ProxyVideoFrame
    __del__ = lambda self : None;
    def getSize(self): return _tinyWRAP.ProxyVideoFrame_getSize(self)
    def getContent(self, *args): return _tinyWRAP.ProxyVideoFrame_getContent(self, *args)
ProxyVideoFrame_swigregister = _tinyWRAP.ProxyVideoFrame_swigregister
ProxyVideoFrame_swigregister(ProxyVideoFrame)

class ProxyAudioProducer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyAudioProducer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyAudioProducer, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == ProxyAudioProducer:
            _self = None
        else:
            _self = self
        this = _tinyWRAP.new_ProxyAudioProducer(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_ProxyAudioProducer
    __del__ = lambda self : None;
    def prepare(self, *args): return _tinyWRAP.ProxyAudioProducer_prepare(self, *args)
    def start(self): return _tinyWRAP.ProxyAudioProducer_start(self)
    def pause(self): return _tinyWRAP.ProxyAudioProducer_pause(self)
    def stop(self): return _tinyWRAP.ProxyAudioProducer_stop(self)
    def setActivate(self, *args): return _tinyWRAP.ProxyAudioProducer_setActivate(self, *args)
    def push(self, *args): return _tinyWRAP.ProxyAudioProducer_push(self, *args)
    __swig_getmethods__["registerPlugin"] = lambda x: _tinyWRAP.ProxyAudioProducer_registerPlugin
    if _newclass:registerPlugin = staticmethod(_tinyWRAP.ProxyAudioProducer_registerPlugin)
    def __disown__(self):
        self.this.disown()
        _tinyWRAP.disown_ProxyAudioProducer(self)
        return weakref_proxy(self)
ProxyAudioProducer_swigregister = _tinyWRAP.ProxyAudioProducer_swigregister
ProxyAudioProducer_swigregister(ProxyAudioProducer)

def ProxyAudioProducer_registerPlugin():
  return _tinyWRAP.ProxyAudioProducer_registerPlugin()
ProxyAudioProducer_registerPlugin = _tinyWRAP.ProxyAudioProducer_registerPlugin

class ProxyVideoProducer(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ProxyVideoProducer, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ProxyVideoProducer, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        if self.__class__ == ProxyVideoProducer:
            _self = None
        else:
            _self = self
        this = _tinyWRAP.new_ProxyVideoProducer(_self, *args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_ProxyVideoProducer
    __del__ = lambda self : None;
    def prepare(self, *args): return _tinyWRAP.ProxyVideoProducer_prepare(self, *args)
    def start(self): return _tinyWRAP.ProxyVideoProducer_start(self)
    def pause(self): return _tinyWRAP.ProxyVideoProducer_pause(self)
    def stop(self): return _tinyWRAP.ProxyVideoProducer_stop(self)
    def setActivate(self, *args): return _tinyWRAP.ProxyVideoProducer_setActivate(self, *args)
    def push(self, *args): return _tinyWRAP.ProxyVideoProducer_push(self, *args)
    __swig_getmethods__["registerPlugin"] = lambda x: _tinyWRAP.ProxyVideoProducer_registerPlugin
    if _newclass:registerPlugin = staticmethod(_tinyWRAP.ProxyVideoProducer_registerPlugin)
    def __disown__(self):
        self.this.disown()
        _tinyWRAP.disown_ProxyVideoProducer(self)
        return weakref_proxy(self)
ProxyVideoProducer_swigregister = _tinyWRAP.ProxyVideoProducer_swigregister
ProxyVideoProducer_swigregister(ProxyVideoProducer)

def ProxyVideoProducer_registerPlugin():
  return _tinyWRAP.ProxyVideoProducer_registerPlugin()
ProxyVideoProducer_registerPlugin = _tinyWRAP.ProxyVideoProducer_registerPlugin

class SipCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SipCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == SipCallback:
            _self = None
        else:
            _self = self
        this = _tinyWRAP.new_SipCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipCallback
    __del__ = lambda self : None;
    def OnDialogEvent(self, *args): return _tinyWRAP.SipCallback_OnDialogEvent(self, *args)
    def OnStackEvent(self, *args): return _tinyWRAP.SipCallback_OnStackEvent(self, *args)
    def OnInviteEvent(self, *args): return _tinyWRAP.SipCallback_OnInviteEvent(self, *args)
    def OnMessagingEvent(self, *args): return _tinyWRAP.SipCallback_OnMessagingEvent(self, *args)
    def OnOptionsEvent(self, *args): return _tinyWRAP.SipCallback_OnOptionsEvent(self, *args)
    def OnPublicationEvent(self, *args): return _tinyWRAP.SipCallback_OnPublicationEvent(self, *args)
    def OnRegistrationEvent(self, *args): return _tinyWRAP.SipCallback_OnRegistrationEvent(self, *args)
    def OnSubscriptionEvent(self, *args): return _tinyWRAP.SipCallback_OnSubscriptionEvent(self, *args)
    def __disown__(self):
        self.this.disown()
        _tinyWRAP.disown_SipCallback(self)
        return weakref_proxy(self)
SipCallback_swigregister = _tinyWRAP.SipCallback_swigregister
SipCallback_swigregister(SipCallback)

class SafeObject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SafeObject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SafeObject, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_SafeObject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SafeObject
    __del__ = lambda self : None;
    def Lock(self): return _tinyWRAP.SafeObject_Lock(self)
    def UnLock(self): return _tinyWRAP.SafeObject_UnLock(self)
SafeObject_swigregister = _tinyWRAP.SafeObject_swigregister
SafeObject_swigregister(SafeObject)

class SipStack(SafeObject):
    __swig_setmethods__ = {}
    for _s in [SafeObject]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, SipStack, name, value)
    __swig_getmethods__ = {}
    for _s in [SafeObject]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, SipStack, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_SipStack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SipStack
    __del__ = lambda self : None;
    def start(self): return _tinyWRAP.SipStack_start(self)
    def setDebugCallback(self, *args): return _tinyWRAP.SipStack_setDebugCallback(self, *args)
    def setRealm(self, *args): return _tinyWRAP.SipStack_setRealm(self, *args)
    def setIMPI(self, *args): return _tinyWRAP.SipStack_setIMPI(self, *args)
    def setIMPU(self, *args): return _tinyWRAP.SipStack_setIMPU(self, *args)
    def setPassword(self, *args): return _tinyWRAP.SipStack_setPassword(self, *args)
    def setAMF(self, *args): return _tinyWRAP.SipStack_setAMF(self, *args)
    def setOperatorId(self, *args): return _tinyWRAP.SipStack_setOperatorId(self, *args)
    def setProxyCSCF(self, *args): return _tinyWRAP.SipStack_setProxyCSCF(self, *args)
    def setLocalIP(self, *args): return _tinyWRAP.SipStack_setLocalIP(self, *args)
    def setLocalPort(self, *args): return _tinyWRAP.SipStack_setLocalPort(self, *args)
    def setEarlyIMS(self, *args): return _tinyWRAP.SipStack_setEarlyIMS(self, *args)
    def addHeader(self, *args): return _tinyWRAP.SipStack_addHeader(self, *args)
    def removeHeader(self, *args): return _tinyWRAP.SipStack_removeHeader(self, *args)
    def addDnsServer(self, *args): return _tinyWRAP.SipStack_addDnsServer(self, *args)
    def setDnsDiscovery(self, *args): return _tinyWRAP.SipStack_setDnsDiscovery(self, *args)
    def setAoR(self, *args): return _tinyWRAP.SipStack_setAoR(self, *args)
    def setSigCompParams(self, *args): return _tinyWRAP.SipStack_setSigCompParams(self, *args)
    def addSigCompCompartment(self, *args): return _tinyWRAP.SipStack_addSigCompCompartment(self, *args)
    def removeSigCompCompartment(self, *args): return _tinyWRAP.SipStack_removeSigCompCompartment(self, *args)
    def setSTUNServer(self, *args): return _tinyWRAP.SipStack_setSTUNServer(self, *args)
    def setSTUNCred(self, *args): return _tinyWRAP.SipStack_setSTUNCred(self, *args)
    def dnsENUM(self, *args): return _tinyWRAP.SipStack_dnsENUM(self, *args)
    def dnsNaptrSrv(self, *args): return _tinyWRAP.SipStack_dnsNaptrSrv(self, *args)
    def dnsSrv(self, *args): return _tinyWRAP.SipStack_dnsSrv(self, *args)
    def isValid(self): return _tinyWRAP.SipStack_isValid(self)
    def stop(self): return _tinyWRAP.SipStack_stop(self)
    __swig_getmethods__["setCodecs"] = lambda x: _tinyWRAP.SipStack_setCodecs
    if _newclass:setCodecs = staticmethod(_tinyWRAP.SipStack_setCodecs)
    __swig_getmethods__["setCodecs_2"] = lambda x: _tinyWRAP.SipStack_setCodecs_2
    if _newclass:setCodecs_2 = staticmethod(_tinyWRAP.SipStack_setCodecs_2)
SipStack_swigregister = _tinyWRAP.SipStack_swigregister
SipStack_swigregister(SipStack)

def SipStack_setCodecs(*args):
  return _tinyWRAP.SipStack_setCodecs(*args)
SipStack_setCodecs = _tinyWRAP.SipStack_setCodecs

def SipStack_setCodecs_2(*args):
  return _tinyWRAP.SipStack_setCodecs_2(*args)
SipStack_setCodecs_2 = _tinyWRAP.SipStack_setCodecs_2

tsip_event_invite = _tinyWRAP.tsip_event_invite
tsip_event_message = _tinyWRAP.tsip_event_message
tsip_event_options = _tinyWRAP.tsip_event_options
tsip_event_publish = _tinyWRAP.tsip_event_publish
tsip_event_register = _tinyWRAP.tsip_event_register
tsip_event_subscribe = _tinyWRAP.tsip_event_subscribe
tsip_event_dialog = _tinyWRAP.tsip_event_dialog
tsip_event_code_dialog_transport_error = _tinyWRAP.tsip_event_code_dialog_transport_error
tsip_event_code_dialog_global_error = _tinyWRAP.tsip_event_code_dialog_global_error
tsip_event_code_dialog_message_error = _tinyWRAP.tsip_event_code_dialog_message_error
tsip_event_code_dialog_request_incoming = _tinyWRAP.tsip_event_code_dialog_request_incoming
tsip_event_code_dialog_request_cancelled = _tinyWRAP.tsip_event_code_dialog_request_cancelled
tsip_event_code_dialog_request_sent = _tinyWRAP.tsip_event_code_dialog_request_sent
tsip_event_code_dialog_connecting = _tinyWRAP.tsip_event_code_dialog_connecting
tsip_event_code_dialog_connected = _tinyWRAP.tsip_event_code_dialog_connected
tsip_event_code_dialog_terminating = _tinyWRAP.tsip_event_code_dialog_terminating
tsip_event_code_dialog_terminated = _tinyWRAP.tsip_event_code_dialog_terminated
tsip_event_code_stack_started = _tinyWRAP.tsip_event_code_stack_started
tsip_event_code_stack_stopped = _tinyWRAP.tsip_event_code_stack_stopped
tsip_event_code_stack_failed_to_start = _tinyWRAP.tsip_event_code_stack_failed_to_start
tsip_event_code_stack_failed_to_stop = _tinyWRAP.tsip_event_code_stack_failed_to_stop
tsip_i_register = _tinyWRAP.tsip_i_register
tsip_ao_register = _tinyWRAP.tsip_ao_register
tsip_i_unregister = _tinyWRAP.tsip_i_unregister
tsip_ao_unregister = _tinyWRAP.tsip_ao_unregister
tsip_i_subscribe = _tinyWRAP.tsip_i_subscribe
tsip_ao_subscribe = _tinyWRAP.tsip_ao_subscribe
tsip_i_unsubscribe = _tinyWRAP.tsip_i_unsubscribe
tsip_ao_unsubscribe = _tinyWRAP.tsip_ao_unsubscribe
tsip_i_notify = _tinyWRAP.tsip_i_notify
tsip_ao_notify = _tinyWRAP.tsip_ao_notify
tsip_i_publish = _tinyWRAP.tsip_i_publish
tsip_ao_publish = _tinyWRAP.tsip_ao_publish
tsip_i_unpublish = _tinyWRAP.tsip_i_unpublish
tsip_ao_unpublish = _tinyWRAP.tsip_ao_unpublish
tsip_i_message = _tinyWRAP.tsip_i_message
tsip_ao_message = _tinyWRAP.tsip_ao_message
tsip_i_options = _tinyWRAP.tsip_i_options
tsip_ao_options = _tinyWRAP.tsip_ao_options
tsip_i_newcall = _tinyWRAP.tsip_i_newcall
tsip_i_request = _tinyWRAP.tsip_i_request
tsip_ao_request = _tinyWRAP.tsip_ao_request
tsip_o_ect_ok = _tinyWRAP.tsip_o_ect_ok
tsip_o_ect_nok = _tinyWRAP.tsip_o_ect_nok
tsip_i_ect = _tinyWRAP.tsip_i_ect
tsip_m_early_media = _tinyWRAP.tsip_m_early_media
tsip_m_local_hold_ok = _tinyWRAP.tsip_m_local_hold_ok
tsip_m_local_hold_nok = _tinyWRAP.tsip_m_local_hold_nok
tsip_m_local_resume_ok = _tinyWRAP.tsip_m_local_resume_ok
tsip_m_local_resume_nok = _tinyWRAP.tsip_m_local_resume_nok
tsip_m_remote_hold = _tinyWRAP.tsip_m_remote_hold
tsip_m_remote_resume = _tinyWRAP.tsip_m_remote_resume
tmedia_rgb24 = _tinyWRAP.tmedia_rgb24
tmedia_rgb565le = _tinyWRAP.tmedia_rgb565le
tmedia_rgb565be = _tinyWRAP.tmedia_rgb565be
tmedia_nv21 = _tinyWRAP.tmedia_nv21
tmedia_yuv420p = _tinyWRAP.tmedia_yuv420p
tmedia_qos_stype_none = _tinyWRAP.tmedia_qos_stype_none
tmedia_qos_stype_segmented = _tinyWRAP.tmedia_qos_stype_segmented
tmedia_qos_stype_e2e = _tinyWRAP.tmedia_qos_stype_e2e
tmedia_qos_strength_none = _tinyWRAP.tmedia_qos_strength_none
tmedia_qos_strength_failure = _tinyWRAP.tmedia_qos_strength_failure
tmedia_qos_strength_unknown = _tinyWRAP.tmedia_qos_strength_unknown
tmedia_qos_strength_optional = _tinyWRAP.tmedia_qos_strength_optional
tmedia_qos_strength_mandatory = _tinyWRAP.tmedia_qos_strength_mandatory
tmedia_bl_low = _tinyWRAP.tmedia_bl_low
tmedia_bl_medium = _tinyWRAP.tmedia_bl_medium
tmedia_bl_hight = _tinyWRAP.tmedia_bl_hight
tdav_codec_id_amr_nb_oa = _tinyWRAP.tdav_codec_id_amr_nb_oa
tdav_codec_id_amr_nb_be = _tinyWRAP.tdav_codec_id_amr_nb_be
tdav_codec_id_amr_wb_oa = _tinyWRAP.tdav_codec_id_amr_wb_oa
tdav_codec_id_amr_wb_be = _tinyWRAP.tdav_codec_id_amr_wb_be
tdav_codec_id_gsm = _tinyWRAP.tdav_codec_id_gsm
tdav_codec_id_pcma = _tinyWRAP.tdav_codec_id_pcma
tdav_codec_id_pcmu = _tinyWRAP.tdav_codec_id_pcmu
tdav_codec_id_ilbc = _tinyWRAP.tdav_codec_id_ilbc
tdav_codec_id_speex_nb = _tinyWRAP.tdav_codec_id_speex_nb
tdav_codec_id_speex_wb = _tinyWRAP.tdav_codec_id_speex_wb
tdav_codec_id_speex_uwb = _tinyWRAP.tdav_codec_id_speex_uwb
tdav_codec_id_bv16 = _tinyWRAP.tdav_codec_id_bv16
tdav_codec_id_bv32 = _tinyWRAP.tdav_codec_id_bv32
tdav_codec_id_evrc = _tinyWRAP.tdav_codec_id_evrc
tdav_codec_id_h261 = _tinyWRAP.tdav_codec_id_h261
tdav_codec_id_h263 = _tinyWRAP.tdav_codec_id_h263
tdav_codec_id_h263p = _tinyWRAP.tdav_codec_id_h263p
tdav_codec_id_h263pp = _tinyWRAP.tdav_codec_id_h263pp
tdav_codec_id_h264_bp10 = _tinyWRAP.tdav_codec_id_h264_bp10
tdav_codec_id_h264_bp20 = _tinyWRAP.tdav_codec_id_h264_bp20
tdav_codec_id_h264_bp30 = _tinyWRAP.tdav_codec_id_h264_bp30
tdav_codec_id_theora = _tinyWRAP.tdav_codec_id_theora
class XcapSelector(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XcapSelector, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XcapSelector, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_XcapSelector(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_XcapSelector
    __del__ = lambda self : None;
    def setAUID(self, *args): return _tinyWRAP.XcapSelector_setAUID(self, *args)
    def setName(self, *args): return _tinyWRAP.XcapSelector_setName(self, *args)
    def setAttribute(self, *args): return _tinyWRAP.XcapSelector_setAttribute(self, *args)
    def setPos(self, *args): return _tinyWRAP.XcapSelector_setPos(self, *args)
    def setPosAttribute(self, *args): return _tinyWRAP.XcapSelector_setPosAttribute(self, *args)
    def setNamespace(self, *args): return _tinyWRAP.XcapSelector_setNamespace(self, *args)
    def getString(self): return _tinyWRAP.XcapSelector_getString(self)
    def reset(self): return _tinyWRAP.XcapSelector_reset(self)
XcapSelector_swigregister = _tinyWRAP.XcapSelector_swigregister
XcapSelector_swigregister(XcapSelector)

class XcapMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XcapMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XcapMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_XcapMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_XcapMessage
    __del__ = lambda self : None;
    def getCode(self): return _tinyWRAP.XcapMessage_getCode(self)
    def getPhrase(self): return _tinyWRAP.XcapMessage_getPhrase(self)
    def getXcapHeaderValue(self, *args): return _tinyWRAP.XcapMessage_getXcapHeaderValue(self, *args)
    def getXcapHeaderParamValue(self, *args): return _tinyWRAP.XcapMessage_getXcapHeaderParamValue(self, *args)
    def getXcapContentLength(self): return _tinyWRAP.XcapMessage_getXcapContentLength(self)
    def getXcapContent(self, *args): return _tinyWRAP.XcapMessage_getXcapContent(self, *args)
XcapMessage_swigregister = _tinyWRAP.XcapMessage_swigregister
XcapMessage_swigregister(XcapMessage)

class XcapEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XcapEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XcapEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_XcapEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.XcapEvent_getType(self)
    def getXcapMessage(self): return _tinyWRAP.XcapEvent_getXcapMessage(self)
XcapEvent_swigregister = _tinyWRAP.XcapEvent_swigregister
XcapEvent_swigregister(XcapEvent)

class XcapCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XcapCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XcapCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == XcapCallback:
            _self = None
        else:
            _self = self
        this = _tinyWRAP.new_XcapCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_XcapCallback
    __del__ = lambda self : None;
    def onEvent(self, *args): return _tinyWRAP.XcapCallback_onEvent(self, *args)
    def __disown__(self):
        self.this.disown()
        _tinyWRAP.disown_XcapCallback(self)
        return weakref_proxy(self)
XcapCallback_swigregister = _tinyWRAP.XcapCallback_swigregister
XcapCallback_swigregister(XcapCallback)

class XcapStack(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, XcapStack, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, XcapStack, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _tinyWRAP.new_XcapStack(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_XcapStack
    __del__ = lambda self : None;
    def start(self): return _tinyWRAP.XcapStack_start(self)
    def setCredentials(self, *args): return _tinyWRAP.XcapStack_setCredentials(self, *args)
    def setXcapRoot(self, *args): return _tinyWRAP.XcapStack_setXcapRoot(self, *args)
    def setLocalIP(self, *args): return _tinyWRAP.XcapStack_setLocalIP(self, *args)
    def setLocalPort(self, *args): return _tinyWRAP.XcapStack_setLocalPort(self, *args)
    def addHeader(self, *args): return _tinyWRAP.XcapStack_addHeader(self, *args)
    def removeHeader(self, *args): return _tinyWRAP.XcapStack_removeHeader(self, *args)
    def setTimeout(self, *args): return _tinyWRAP.XcapStack_setTimeout(self, *args)
    def getDocument(self, *args): return _tinyWRAP.XcapStack_getDocument(self, *args)
    def stop(self): return _tinyWRAP.XcapStack_stop(self)
XcapStack_swigregister = _tinyWRAP.XcapStack_swigregister
XcapStack_swigregister(XcapStack)

thttp_event_message = _tinyWRAP.thttp_event_message
thttp_event_auth_failed = _tinyWRAP.thttp_event_auth_failed
thttp_event_closed = _tinyWRAP.thttp_event_closed
thttp_event_transport_error = _tinyWRAP.thttp_event_transport_error
twrap_rpmessage_type_sms_none = _tinyWRAP.twrap_rpmessage_type_sms_none
twrap_rpmessage_type_sms_submit = _tinyWRAP.twrap_rpmessage_type_sms_submit
twrap_rpmessage_type_sms_deliver = _tinyWRAP.twrap_rpmessage_type_sms_deliver
twrap_rpmessage_type_sms_ack = _tinyWRAP.twrap_rpmessage_type_sms_ack
twrap_rpmessage_type_sms_error = _tinyWRAP.twrap_rpmessage_type_sms_error
twrap_sms_type_none = _tinyWRAP.twrap_sms_type_none
twrap_sms_type_rpdata = _tinyWRAP.twrap_sms_type_rpdata
twrap_sms_type_smma = _tinyWRAP.twrap_sms_type_smma
twrap_sms_type_ack = _tinyWRAP.twrap_sms_type_ack
twrap_sms_type_error = _tinyWRAP.twrap_sms_type_error
class RPMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, RPMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, RPMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_RPMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_RPMessage
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.RPMessage_getType(self)
    def getPayloadLength(self): return _tinyWRAP.RPMessage_getPayloadLength(self)
    def getPayload(self, *args): return _tinyWRAP.RPMessage_getPayload(self, *args)
RPMessage_swigregister = _tinyWRAP.RPMessage_swigregister
RPMessage_swigregister(RPMessage)

class SMSData(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMSData, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMSData, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_SMSData()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_SMSData
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.SMSData_getType(self)
    def getMR(self): return _tinyWRAP.SMSData_getMR(self)
    def getPayloadLength(self): return _tinyWRAP.SMSData_getPayloadLength(self)
    def getPayload(self, *args): return _tinyWRAP.SMSData_getPayload(self, *args)
    def getOA(self): return _tinyWRAP.SMSData_getOA(self)
    def getDA(self): return _tinyWRAP.SMSData_getDA(self)
SMSData_swigregister = _tinyWRAP.SMSData_swigregister
SMSData_swigregister(SMSData)

class SMSEncoder(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SMSEncoder, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SMSEncoder, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_getmethods__["encodeSubmit"] = lambda x: _tinyWRAP.SMSEncoder_encodeSubmit
    if _newclass:encodeSubmit = staticmethod(_tinyWRAP.SMSEncoder_encodeSubmit)
    __swig_getmethods__["encodeDeliver"] = lambda x: _tinyWRAP.SMSEncoder_encodeDeliver
    if _newclass:encodeDeliver = staticmethod(_tinyWRAP.SMSEncoder_encodeDeliver)
    __swig_getmethods__["encodeACK"] = lambda x: _tinyWRAP.SMSEncoder_encodeACK
    if _newclass:encodeACK = staticmethod(_tinyWRAP.SMSEncoder_encodeACK)
    __swig_getmethods__["encodeError"] = lambda x: _tinyWRAP.SMSEncoder_encodeError
    if _newclass:encodeError = staticmethod(_tinyWRAP.SMSEncoder_encodeError)
    __swig_getmethods__["decode"] = lambda x: _tinyWRAP.SMSEncoder_decode
    if _newclass:decode = staticmethod(_tinyWRAP.SMSEncoder_decode)
    __swig_destroy__ = _tinyWRAP.delete_SMSEncoder
    __del__ = lambda self : None;
SMSEncoder_swigregister = _tinyWRAP.SMSEncoder_swigregister
SMSEncoder_swigregister(SMSEncoder)

def SMSEncoder_encodeSubmit(*args):
  return _tinyWRAP.SMSEncoder_encodeSubmit(*args)
SMSEncoder_encodeSubmit = _tinyWRAP.SMSEncoder_encodeSubmit

def SMSEncoder_encodeDeliver(*args):
  return _tinyWRAP.SMSEncoder_encodeDeliver(*args)
SMSEncoder_encodeDeliver = _tinyWRAP.SMSEncoder_encodeDeliver

def SMSEncoder_encodeACK(*args):
  return _tinyWRAP.SMSEncoder_encodeACK(*args)
SMSEncoder_encodeACK = _tinyWRAP.SMSEncoder_encodeACK

def SMSEncoder_encodeError(*args):
  return _tinyWRAP.SMSEncoder_encodeError(*args)
SMSEncoder_encodeError = _tinyWRAP.SMSEncoder_encodeError

def SMSEncoder_decode(*args):
  return _tinyWRAP.SMSEncoder_decode(*args)
SMSEncoder_decode = _tinyWRAP.SMSEncoder_decode

class MsrpMessage(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsrpMessage, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsrpMessage, name)
    __repr__ = _swig_repr
    def __init__(self): 
        this = _tinyWRAP.new_MsrpMessage()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_MsrpMessage
    __del__ = lambda self : None;
    def isRequest(self): return _tinyWRAP.MsrpMessage_isRequest(self)
    def getCode(self): return _tinyWRAP.MsrpMessage_getCode(self)
    def getPhrase(self): return _tinyWRAP.MsrpMessage_getPhrase(self)
    def getRequestType(self): return _tinyWRAP.MsrpMessage_getRequestType(self)
    def getByteRange(self): return _tinyWRAP.MsrpMessage_getByteRange(self)
    def isLastChunck(self): return _tinyWRAP.MsrpMessage_isLastChunck(self)
    def getMsrpHeaderValue(self, *args): return _tinyWRAP.MsrpMessage_getMsrpHeaderValue(self, *args)
    def getMsrpHeaderParamValue(self, *args): return _tinyWRAP.MsrpMessage_getMsrpHeaderParamValue(self, *args)
    def getMsrpContentLength(self): return _tinyWRAP.MsrpMessage_getMsrpContentLength(self)
    def getMsrpContent(self, *args): return _tinyWRAP.MsrpMessage_getMsrpContent(self, *args)
MsrpMessage_swigregister = _tinyWRAP.MsrpMessage_swigregister
MsrpMessage_swigregister(MsrpMessage)

class MsrpEvent(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsrpEvent, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsrpEvent, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    __swig_destroy__ = _tinyWRAP.delete_MsrpEvent
    __del__ = lambda self : None;
    def getType(self): return _tinyWRAP.MsrpEvent_getType(self)
    def getSipSession(self): return _tinyWRAP.MsrpEvent_getSipSession(self)
    def getMessage(self): return _tinyWRAP.MsrpEvent_getMessage(self)
MsrpEvent_swigregister = _tinyWRAP.MsrpEvent_swigregister
MsrpEvent_swigregister(MsrpEvent)

class MsrpCallback(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, MsrpCallback, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, MsrpCallback, name)
    __repr__ = _swig_repr
    def __init__(self): 
        if self.__class__ == MsrpCallback:
            _self = None
        else:
            _self = self
        this = _tinyWRAP.new_MsrpCallback(_self, )
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _tinyWRAP.delete_MsrpCallback
    __del__ = lambda self : None;
    def OnEvent(self, *args): return _tinyWRAP.MsrpCallback_OnEvent(self, *args)
    def __disown__(self):
        self.this.disown()
        _tinyWRAP.disown_MsrpCallback(self)
        return weakref_proxy(self)
MsrpCallback_swigregister = _tinyWRAP.MsrpCallback_swigregister
MsrpCallback_swigregister(MsrpCallback)

tmsrp_NONE = _tinyWRAP.tmsrp_NONE
tmsrp_SEND = _tinyWRAP.tmsrp_SEND
tmsrp_REPORT = _tinyWRAP.tmsrp_REPORT
tmsrp_AUTH = _tinyWRAP.tmsrp_AUTH
tmsrp_event_type_none = _tinyWRAP.tmsrp_event_type_none
tmsrp_event_type_connected = _tinyWRAP.tmsrp_event_type_connected
tmsrp_event_type_disconnected = _tinyWRAP.tmsrp_event_type_disconnected
tmsrp_event_type_message = _tinyWRAP.tmsrp_event_type_message


